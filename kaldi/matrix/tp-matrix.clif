from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/packed-matrix-clifwrap.h" import *
from "matrix/sp-matrix-clifwrap.h" import *
from "matrix/matrix-ext.h" import *

from "matrix/tp-matrix.h":
  namespace `kaldi`:
    class `TpMatrix<float>` as TpMatrix(PackedMatrix):

      @add__init__
      def `TpMatrix` as New(self, r: int,
                            resize_type: MatrixResizeType = default)

      @add__init__
      def `TpMatrix` as NewWithOther(self, orig:TpMatrix)

      # TODO:
      # def `TpMatrix` as WithCU(cu:CuTpMatrix)

      def `operator()` as Get(self, r: int, c: int) -> float:
        """Indexing operator.
   
         Args:
             r(int): The row. Indexing starts from 0
             c(int): The column. Indexing starts from 0
   
         Returns:
             The value of the indexed element
         """

      def Cholesky(self, orig:SpMatrix)

      def Invert(self):
        """Invert the matrix"""

      def InvertDouble(self)

      def Swap(self, other: TpMatrix):
        """Swap the contents of self with ``other''. Shllow swap.

        Args:
            other(TpMatrix): A triangular matrix.
      """

      def Determinant(self) -> float:
        """Return the determinant of the matrix."""

      def CopyFromMat(self, M:MatrixBase, Trans:MatrixTransposeType = default)

      def CopyFromTp(self, other:TpMatrix):
        """Copy data from another triangular matrix of the same size

        Args:
            other(ToMatrix): The matrix to copy from.

        Raises:
            Error in case of dimension mismatch
        """

      def AddTp(self, alpha: float, M:TpMatrix)
