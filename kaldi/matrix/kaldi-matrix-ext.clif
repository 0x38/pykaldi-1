from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/sp-matrix-clifwrap.h" import *
from "matrix/tp-matrix-clifwrap.h" import *
from "matrix/compressed-matrix-clifwrap.h" import *


from "matrix/kaldi-matrix-ext.h":
  namespace `kaldi`:
    def `CopyFromMat` as copy_from_mat(self: MatrixBase, M: CompressedMatrix):
      """Copy data to self from a compressed matrix.
    
      Args:
          M(CompressedMatrix): The compressed matrix to copy from.
    
      Raises:
          Error in case of dimension mismatch
      """

    def `CopyFromSp` as copy_from_sp(self: MatrixBase, M: SpMatrix):
      """Copy data to self from a symmetric positive definite matrix.
    
      Args:
          M(SpMatrix): The symmetric positive definite  matrix to copy from.
    
      Raises:
          Error in case of dimension mismatch
      """

    def `CopyFromTp` as copy_from_tp(self: MatrixBase, M: TpMatrix):
      """Copy data to self from a symmetric positive definite matrix.
    
      Args:
          M(TpMatrix): The triangular  matrix to copy from.
    
      Raises:
          Error in case of dimension mismatch
      """                                                               
 
    def `AddSp` as add_sp(self: MatrixBase, alpha: float, S: SpMatrix):
      """Performs the self = self+alpha*S
         
         Args:
             alpha(float): A constant
             S(SpMatrix): A symmetric matrix
 
         Raises:
             Error if S is not square
      """

    def `AddSpMat` as add_sp_mat(self: MatrixBase, alpha: float, A: SpMatrix, B: MatrixBase, transB: MatrixTransposeType, beta: float):
      """Performs the operation self = beta*shelf + alpha*A*B
         
         Args:
             alpha(float): A constant
             A(SpMatrix): A symmetric matrix
             B(MatrixBase): A matrix
             transB(MatrixTransposeType): kTrans if the matrix is to be transposed
                                          or kNoTrans(default otherwise)
             beta(float): A constant
         
         Raises:
             Error in case of dimension mismatch
      """

    def `AddTpMat` as add_tp_mat(self: MatrixBase, alpha: float, A: TpMatrix, transA: MatrixTransposeType, B: MatrixBase, transB: MatrixTransposeType, beta: float):
      """Performs the operation self = beta*shelf + alpha*A*B
        
        Args:
            alpha(float): A constant
            A(TpMatrix): A triangular matrix
            transA(MatrixTransposeType): kTrans if the matrix is to be transposed
                                         or kNoTrans(default otherwise)
            B(MatrixBase): A matrix
            transB(MatrixTransposeType): kTrans if the matrix is to be transposed
                                         or kNoTrans(default otherwise)
            beta(float): A constant
        
        Raises:
            Error in case of dimension mismatch
      """
   
    def `AddMatSp` as add_mat_sp(self: MatrixBase, alpha: float, A: MatrixBase, transA: MatrixTransposeType, B: SpMatrix, beta: float):
      """Performs the operation self = beta*shelf + alpha*A*B
         
         Args:
             alpha(float): A constant
             A(MatrixBase): A  matrix
             transA(MatrixTransposeType): kTrans if the matrix is to be transposed
                                          or kNoTrans(default otherwise)
             B(SpMatrix): A symmetric matrix
             beta(float): A constant
         
         Raises:
             Error in case of dimension mismatch
      """

    def `AddMatTp` as add_mat_tp(self: MatrixBase, alpha: float, A: MatrixBase, transA: MatrixTransposeType, B: TpMatrix, transB: MatrixTransposeType, beta: float):
      """Performs the operation self = beta*shelf + alpha*A*B
        
         Args:
             alpha(float): A constant
             A(MatrixBase): A  matrix
             transA(MatrixTransposeType): kTrans if the matrix is to be transposed
                                          or kNoTrans(default otherwise)
             B(TpMatrix): A triangular matrix
             transB(MatrixTransposeType): kTrans if the matrix is to be transposed
                                          or kNoTrans(default otherwise)
             beta(float): A constant
         
         Raises:
             Error in case of dimension mismatch
      """

    def `AddTpTp` as add_tp_tp(self: MatrixBase, alpha: float, A: TpMatrix, transA: MatrixTransposeType, B: TpMatrix, transB: MatrixTransposeType, beta: float):
      """Performs the operation self = beta*shelf + alpha*A*B
        
         Args:
             alpha(float): A constant
             A(TpMatrix): A triangular  matrix
             transA(MatrixTransposeType): kTrans if the matrix is to be transposed
                                          or kNoTrans(default otherwise)
             B(TpMatrix): A triangular matrix
             transB(MatrixTransposeType): kTrans if the matrix is to be transposed
                                          or kNoTrans(default otherwise)
             beta(float): A constant
         
         Raises:
             Error in case of dimension mismatch
      """
   
    def `AddSpSp` as add_sp_sp(self: MatrixBase, alpha: float, A: SpMatrix, B: SpMatrix, beta: float):
      """Performs the operation self = beta*shelf + alpha*A*B
        
         Args:
             alpha(float): A constant
             A(SpMatrix): A symmetric matrix
             B(SpMatrix): A symmetric matrix
             beta(float): A constant
         
         Raises:
             Error in case of dimension mismatch
      """

    # FIXME: 
    # MatrixBase constructor is protected...
    # def GroupPnormDeriv(self: MatrixBase, input: MatrixBase, power: float) -> (output:Matrix)
