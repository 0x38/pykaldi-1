from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/sp-matrix-clifwrap.h" import *
from "matrix/tp-matrix-clifwrap.h" import *
from "matrix/compressed-matrix-clifwrap.h" import *


from "matrix/kaldi-matrix-ext.h":
  namespace `kaldi`:
    def CopyFromMat(self: MatrixBase, M: CompressedMatrix)
      """Copy data to self from a compressed matrix.
    
      Args:
          M(CompressedMatrix): The compressed matrix to copy from.
    
      Raises:
          Error in case of dimension mismatch
      """

    def CopyFromSp(self: MatrixBase, M: SpMatrix)
      """Copy data to self from a symmetric positive definite matrix.
    
      Args:
          M(SpMatrix): The symmetric positive definite  matrix to copy from.
    
      Raises:
          Error in case of dimension mismatch
      """

    def CopyFromTp(self: MatrixBase, M: TpMatrix)
      """Copy data to self from a symmetric positive definite matrix.
    
      Args:
          M(TpMatrix): The triangular  matrix to copy from.
    
      Raises:
          Error in case of dimension mismatch
      """                                                               
 
    def AddSp(self: MatrixBase, alpha: float, S: SpMatrix)
    
    def AddSpMat(self: MatrixBase, alpha: float, A: SpMatrix, B: MatrixBase, transB: MatrixTransposeType, beta: float)
    
    def AddTpMat(self: MatrixBase, alpha: float, A: TpMatrix, transA: MatrixTransposeType, B: MatrixBase, transB: MatrixTransposeType, beta: float)
    
    def AddMatSp(self: MatrixBase, alpha: float, A: MatrixBase, transA: MatrixTransposeType, B: SpMatrix, beta: float)
    
    def AddMatTp(self: MatrixBase, alpha: float, A: MatrixBase, transA: MatrixTransposeType, B: TpMatrix, transB: MatrixTransposeType, beta: float)
    
    def AddTpTp(self: MatrixBase, alpha: float, A: TpMatrix, transA: MatrixTransposeType, B: TpMatrix, transB: MatrixTransposeType, beta: float)
    
    def AddSpSp(self: MatrixBase, alpha: float, A: SpMatrix, B: SpMatrix, beta: float)

    # FIXME: 
    # MatrixBase constructor is protected...
    # def GroupPnormDeriv(self: MatrixBase, input: MatrixBase, power: float) -> (output:Matrix)
