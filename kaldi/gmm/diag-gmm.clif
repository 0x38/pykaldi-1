from "base/iostream-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "gmm/full-gmm-clifwrap.h" import *
from "tree/clusterable-classes-clifwrap.h" import *

from "gmm/diag-gmm.h":
  namespace `kaldi`:
    class DiagGmm:
      @add__init__
      def `DiagGmm` as from_other(self, gmm: DiagGmm)

      @add__init__
      def `DiagGmm` as from_clusterable(self, gc: GaussClusterable,
                                        var_floor: float)

      # def CopyFromNormal(self, diag_gmm_normal: DiagGmmNormal)

      @add__init__
      def `DiagGmm` as from_nmix_dim(self, nmix: int, dim: int)

      # FIXME: CLIF is confused
      # @add__init__
      # def `DiagGmm` as merge_gmms(self, gmms: list<tuple<float, DiagGmm>>)

      def `Resize` as resize(self, nmix: int, dim: int):
        """Resizes arrays to this dim. Does not init data."""

      def `NumGauss` as num_gauss(self) -> int:
        """Returns the number of mixture components."""

      def `Dim` as dim(self) -> int:
        """Returns the dimensionality of the Gaussian mean vectors."""

      def `CopyFromDiagGmm` as copy_from_diag(self, diaggmm: DiagGmm):
        """Copies from given :class:`DiagGmm`"""

      def `CopyFromFullGmm` as copy_from_full(self, fullgmm: FullGmm):
        """Copies from given :class:`FullGmm`"""

      def `LogLikelihood` as log_likelihood(self, data: VectorBase) -> float:
        """Returns the log-likelihood of a data point given the GMM.

        Args:
          data (:class:`kaldi.matrix.VectorBase`) - data point
        """

      def `LogLikelihoods` as log_likelihoods(self, data: VectorBase) -> Vector:
        """Output the per-component distribution to the log-likelihood

        Args:
          data (:class:`kaldi.matrix.VectorBase`) - data point
        """

      def `LogLikelihoods` as log_likelihoods_matrix(self, data: MatrixBase)
          -> Matrix

      def `LogLikelihoodsPreselect` as log_likelihoods_preselect(self, data: VectorBase, indices: list<int>) -> Vector:
            """Outputs the per-component log-likelihoods of a subset of mixture components.

            Args:
              data (:class:`kaldi.matrix.VectorBase`) - data point
              indices - list of indices
            """

      def `GaussianSelection` as gaussian_selection(self, data: VectorBase, num_gselect: int) -> (log_like: float, output: list<int>):
            """Get gaussian selection information for one frame.

            Args:
              data (:class:`kaldi.matrix.VectorBase`) - data point
              num_gselect (int) - Output is the best "num_gselect" indices, sorted from best to worst.

            Returns:
              log-likelihood for this frame.
            """

      def `GaussianSelection` as gaussian_selection_matrix(self, data: MatrixBase, num_gselect: int) -> (log_like: float, output: list<list<int>>):
        """"""

      def `GaussianSelectionPreselect` as gaussian_selection_preselect(self, data: VectorBase, preselect: list<int>, num_gselect: int) -> (log_like: float, output: list<int>):
        """Get gaussian selection information for one frame.

        Args:
          data (:class:`kaldi.matrix.VectorBase`) - data point
          preselect (list) - subset of mixture components
          num_gselect (int) - Output is the best "num_gselect" indices, sorted from best to worst.

        Returns:
          Log-like for this frame.
        """

      def `ComponentPosteriors` as component_posteriors(self, data: VectorBase) -> (log_like: float, posteriors: Vector):
        """Computes the posterior probabilities of all Gaussian components given a data point.

        Args:
          data (:class:`kaldi.matrix.VectorBase`) - data point
          posterior (:class:`kaldi.matrix.VectorBase`) - output vector

        Returns:
          Log-likehood of the data given the GMM.

        """

      def `ComponentLogLikelihood` as component_log_likelihood(self, data: VectorBase, comp_id: int) -> float:
        """Computes the contribution log-likelihood of a data point from a single Gaussian component.

        Args:
          data (:class:`kaldi.matrix.VectorBase`) - data point
          comp_id - component id

        Returns:
          Log-likehood for a given component
        """

      def `ComputeGconsts` as compute_gconsts(self) -> int:
        """Sets the gconsts.

        Returns:
          Number that are invalid e.g. because of zero weights or variances.
        """

      def `Generate` as generate(self, output: VectorBase)

      # FIXME: Write a wrapper for this to work around the container not
      # getting updated problem.
      # def Split(self, target_components: int, perturb_factor: float,
      #           history: list<int> = default)

      def `Perturb` as perturb(self, perturb_factor: float):
        """Perturbs the component means with a random vector multiplied by the pertrub factor."""

      # FIXME: Write a wrapper for this to work around the container not
      # getting updated problem.
      # def Merge(self, target_components: int, history: list<int> = default)

      # def MergeKmeans(self, target_components: int,
      #                 cfg: ClusterKMeansOptions = default)

      def `Write` as write(self, os: ostream, binary: bool)
      def `Read` as read(self, is: istream, binary: bool)

      def `Interpolate` as interpolate(self, rho: float, source: DiagGmm, flags: int = default):
        """
          this <- rho * source + (1 - rho) * this
        """

      def `Interpolate` as interpolate_full(self, rho: float, source: FullGmm, flags: int = default):
        """
          this <- rho * source + (1 - rho) * this
        """

      gconsts_: Vector = property(`gconsts`)
      weights_: Vector = property(`weights`)
      means_invvars_: Matrix = property(`means_invvars`)
      inv_vars_: Matrix = property(`inv_vars`)

      def `valid_gconsts`as valid_gconsts(self) -> bool

      def `RemoveComponent`as remove_component(self, gauss: int, renorm_weights: bool)

      def `RemoveComponents` as remove_components(self, gauss: list<int>, renorm_weights: bool)

      def `SetWeights` as set_weights(self, w: VectorBase)

      def `SetMeans` as set_means(self, m: MatrixBase)

      def `SetInvVarsAndMeans` as set_inv_vars_and_means(self, invvars: MatrixBase, means: MatrixBase)

      def `SetInvVars` as set_inv_vars(self, v: MatrixBase)

      def `GetVars` as get_vars(self) -> Matrix

      def `GetMeans` as get_means(self) -> Matrix

      def `SetComponentMean` as set_component_mean(self, gauss: int, in: VectorBase)

      def `SetComponentInvVar` as set_component_inv_var(self, gauss: int, in: VectorBase)

      def `SetComponentWeight` as set_component_weight(self, gauss: int, weight: float)

      def `GetComponentMean` as get_component_mean(self, gauss: int, out: VectorBase)

      def `GetComponentVariance` as get_component_variance(self, gauss: int, out: VectorBase)
