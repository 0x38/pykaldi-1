from "util/iostream-clifwrap.h" import *
from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "cudamatrix/cu-matrixdim-clifwrap.h" import *
from "cudamatrix/cu-array-clifwrap.h" import *
from "cudamatrix/cu-vector-clifwrap.h" import *

from "cudamatrix/cu-matrix.h":
  namespace `kaldi`:
    class `CuMatrixBase<float>` as CuMatrixBase:
      def CopyCols(self, src: CuMatrixBase, indexes: CuArray)

      def AddCols(self, src: CuMatrixBase, indexes: CuArray)

      def CopyRows(self, src: CuMatrixBase, indexes: CuArray)

      # def CopyRows(self, src: CuFloatPtrArray)

      def CopyToRows(self, dst: CuFloatPtrArray)

      def AddRows(self, alpha: float, src: CuMatrixBase, indexes: CuArray)

      # def AddRows(self, alpha: float, src: CuFloatPtrArray)

      def AddToRows(self, alpha: float, dst: CuFloatPtrArray)

      def SumColumnRanges(self, src: CuMatrixBase, indexes: CuIntPairArray)

      def AddRowRanges(self, src: CuMatrixBase, indexes: CuIntPairArray)

      def AddToDiag(self, value: float)

      def NumRows(self) -> int

      def NumCols(self) -> int

      def Stride(self) -> int

      def Dim(self) -> MatrixDim

      def FrobeniusNorm(self) -> float

      def IsUnit(self, tol: float = default) -> bool

      def ApproxEqual(self, other: CuMatrixBase, tol: float = default) -> bool

      def SizeInBytes(self) -> int

      def CopyFromMat(self, src: MatrixBase,
                      trans: MatrixTransposeType = default)

      def `CopyFromMat` as CopyFromCuMat(self, src: CuMatrixBase,
                                         trans: MatrixTransposeType = default)

      def CopyToMat(self, dst: MatrixBase,
                    trans: MatrixTransposeType = default)

      def `CopyRowsFromVec` as CopyRowsFromCuVec(self, v: CuVectorBase)

      def CopyRowsFromVec(self, v: VectorBase)

      def `CopyColsFromVec` as CopyColsFromCuVec(self, v: CuVectorBase)

      def `CopyColFromVec` as CopyColFromCuVec(self, v: CuVectorBase, col: int)

      def Sigmoid(self, src: CuMatrixBase)

      def Heaviside(self, src: CuMatrixBase)

      def SoftHinge(self, src: CuMatrixBase)

      def GroupPnorm(self, src: CuMatrixBase, pow: float)

      def DiffGroupPnorm(self, in_value: CuMatrixBase, out_value: CuMatrixBase,
                         out_deriv: CuMatrixBase, power: float)

      def GroupMax(self, src: CuMatrixBase)

      def GroupMaxDeriv(self, input: CuMatrixBase, output: CuMatrixBase)

      def ParametricRelu(self, src: CuMatrixBase, alpha: CuVectorBase,
                         beta: CuVectorBase)

      def DiffParametricRelu(self, value: CuMatrixBase, diff: CuMatrixBase,
                             alpha: CuVectorBase, beta: CuVectorBase)

      def Tanh(self, src: CuMatrixBase)

      def DiffSigmoid(self, value: CuMatrixBase, diff: CuMatrixBase)

      def DiffTanh(self, value: CuMatrixBase, diff: CuMatrixBase)

      def DiffSoftmaxPerRow(self, value: CuMatrixBase, diff: CuMatrixBase)

      def DiffLogSoftmaxPerRow(self, out_value: CuMatrixBase,
                               out_deriv: CuMatrixBase)

      def DiffXent(self, tgt: CuArray) -> CuVector

      def Cholesky(self, inv_cholesky: CuMatrixBase = default)

      def SymInvertPosDef(self)

      def ApplyPow(self, power: float)

      def ApplyPowAbs(self, power: float, include_sign: bool = default)

      def ApplyHeaviside(self)

      def ApplyFloor(self, floor_val: float)

      def ApplyCeiling(self, ceiling_val: float)

      def ApplyExp(self)

      def ApplySoftMaxPerRow(self, src: CuMatrixBase)

      def ApplyLogSoftMaxPerRow(self, src: CuMatrixBase)

      def FindRowMaxId(self) -> CuArray

      def SetZero(self)

      def Set(self, value: float)

      def Add(self, value: float)

      def SetZeroAboveDiag(self)

      def Scale(self, value: float)

      def ApplyLog(self)

      def MulElements(self, A: CuMatrixBase)

      def DivElements(self, A: CuMatrixBase)

      def `Max` as MaxElementwise(self, A: CuMatrixBase)

      def `Min` as MinElementwise(self, A: CuMatrixBase)

      def MulColsVec(self, scale: CuVectorBase)

      def MulRowsVec(self, scale: CuVectorBase)

      def MulRowsGroupMat(self, src: CuMatrixBase)

      def DivRowsVec(self, div: CuVectorBase)

      def InvertElements(self)

      def AddMat(self, alpha: float, A: CuMatrixBase,
                 trans: MatrixTransposeType = default)

      def AddMatBlocks(self, alpha: float, A: CuMatrixBase,
                       trans: MatrixTransposeType = default)

      def AddVecToCols(self, alpha: float, col: CuVectorBase,
                       beta: float = default)

      def AddVecToRows(self, alpha: float, row: CuVectorBase,
                       beta: float = default)

      def AddMatMat(self, alpha: float, A: CuMatrixBase,
                    transA: MatrixTransposeType, B: CuMatrixBase,
                    transB: MatrixTransposeType, beta: float)

      def AddVecVec(self, alpha: float, x: CuVectorBase, y: CuVectorBase)

      def SetMatMatDivMat(self, A: CuMatrixBase, B: CuMatrixBase,
                          C: CuMatrixBase)

      def SymAddMat2(self, alpha: float, M: CuMatrixBase,
                     transA: MatrixTransposeType, beta: float)

      # def AddMatBlock(self, alpha: float, A: CuMatrixBase,
      #                 transA: MatrixTransposeType, B: CuBlockMatrix,
      #                 transB: MatrixTransposeType, beta: float)

      def AddDiagVecMat(self, alpha: float, v: CuVectorBase, M: CuMatrixBase,
                        transM: MatrixTransposeType, beta: float = default)

      def AddMatDiagVec(self, alpha: float, M: CuMatrixBase,
                        transM: MatrixTransposeType, v: CuVectorBase,
                        beta: float = default)

      def AddMatMatElements(self, alpha: float, A: CuMatrixBase,
                            B:CuMatrixBase, beta: float)

      # AddMatSp
      # AddSpMat
      # AddTpMat
      # AddMatTp

      # CopyFromBlock

      def CopyLowerToUpper(self)

      def CopyUpperToLower(self)

      # Range
      # RowRange
      # ColRange
      # Row

      def `operator()` as _getitem(self, r: int, c: int) -> float

      def Sum(self) -> float

      def Max(self) -> float

      def Min(self) -> float

      def Trace(self, check_square: bool = default) -> float

      def SetRandn(self)

      def SetRandUniform(self)

      def Write(self, os: ostream, binary: bool)

      def AddElements(self, alpha: float, input: list<MatrixElement>)

      # Lookup

      # def EqualElementMask(self, mat: CuMatrixBase) -> CuMatrix

      # Mat

    class `CuMatrix<float>` as CuMatrix(CuMatrixBase):
      @add__init__
      def `CuMatrix` as new_from_size(self, rows: int, cols: int,
                                      resize_type: MatrixResizeType = default,
                                      stride_type: MatrixStrideType = default)

      @add__init__
      def `CuMatrix` as new_from_other(self, other: CuMatrixBase,
                                       trans: MatrixTransposeType = default)

      @add__init__
      def `CuMatrix` as new_from_matrix(self, other: MatrixBase,
                                        trans: MatrixTransposeType = default)

      # Copy constructors from CuBlockMatrix, CuSpMatrix, CuTpMatrix

      def Transpose(self)

      def Resize(self, rows: int, cols: int,
                 resize_type: MatrixResizeType = default,
                 stride_type: MatrixStrideType = default)

      def `Swap` as SwapWithMatrix(self, mat: Matrix)

      def Swap(self, mat: CuMatrix)

      def Read(self, is: istream, binary: bool)

      # Mat

      def CompObjfAndDeriv(self, elements: list<MatrixElement>, A: CuMatrix)
          -> (tot_objf: float, tot_weight: float)

    class `CuSubMatrix<float>` as CuSubMatrix(CuMatrixBase):
      def __init__(self, mat: CuMatrixBase, row_offset: int, num_rows: int,
                   col_offset: int, num_cols: int)

      @add__init__
      def `CuSubMatrix` as new_from_other(self, other: CuSubMatrix)

    def `ApproxEqual` as ApproxEqualCuMatrix(A: CuMatrixBase, B: CuMatrixBase,
                                             tol: `float` as float = default)
        -> bool

    def `AssertEqual` as AssertEqualCuMatrix(A: CuMatrixBase, B: CuMatrixBase,
                                             tol: `float` as float = default)

    def `SameDim` as SameDimCuMatrix(M: CuMatrixBase, N: CuMatrixBase) -> bool

    def `SameDimAndStride` as SameDimAndStrideCuMatrix(M: CuMatrixBase,
                                                       N: CuMatrixBase) -> bool
