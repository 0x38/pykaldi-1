from "fstext/float-weight-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/arc-clifwrap.h" import *
from "fstext/symbol-table-clifwrap.h" import *

from "fst/fst.h":
  namespace `fst`:
    const `kNoStateId` as NO_STATE_ID: int
    const `kNoLabel` as NO_LABEL: int

    # StdArc

    class `Fst<StdArc>` as StdFst:

      def `Start` as _start(self) -> int

      def `Final` as _final(self, state: int) -> TropicalWeight

      def `NumArcs` as _num_arcs(self, state: int) -> int

      def `NumInputEpsilons` as _num_input_epsilons(self, state: int) -> int

      def `NumOutputEpsilons` as _num_output_epsilons(self, state: int) -> int

      def `Properties` as _properties(self, mask: int, test: bool) -> int

      def `Type` as _type(self) -> str

      def `InputSymbols` as _input_symbols(self) -> SymbolTable

      def `OutputSymbols` as _output_symbols(self) -> SymbolTable

      # NOTE: These methods are wrapped in concrete child classes.
      #
      # def `Copy` as _copy(self, safe: bool = default) -> StdFst
      #
      # @classmethod
      # def `Read` as _read(cls, filename: str) -> StdFst
      #
      # def `Write` as _write(self, filename: str) -> bool

    # NOTE: We do not need these in Python.
    #
    # class `StateIterator<Fst<StdArc>>` as StdFstStateIterator:
    #
    #   def __init__(self, fst: StdFst)
    #
    #   def `Done` as _done(self) -> bool
    #
    #   def `Value` as _value(self) -> int
    #
    #   def `Next` as _next(self)
    #
    #   def `Reset` as _reset(self)
    #
    # class `ArcIterator<Fst<StdArc>>` as StdFstArcIterator:
    #
    #   def __init__(self, fst: StdFst, s: int)
    #
    #   def `Done` as _done(self) -> bool
    #
    #   def `Value` as _value(self) -> StdArc
    #
    #   def `Next` as _next(self)
    #
    #   def `Reset` as _reset(self)
    #
    #   def `Seek` as _seek(self, a: int)
    #
    #   def `Position` as _position(self) -> int
    #
    #   def `Flags` as _flags(self) -> int
    #
    #   def `SetFlags` as _set_flags(self, flags: int, mask: int)

    #LogArc

    class `Fst<LogArc>` as LogFst:

      def `Start` as _start(self) -> int

      def `Final` as _final(self, state: int) -> LogWeight

      def `NumArcs` as _num_arcs(self, state: int) -> int

      def `NumInputEpsilons` as _num_input_epsilons(self, state: int) -> int

      def `NumOutputEpsilons` as _num_output_epsilons(self, state: int) -> int

      def `Properties` as _properties(self, mask: int, test: bool) -> int

      def `Type` as _type(self) -> str

      def `InputSymbols` as _input_symbols(self) -> SymbolTable

      def `OutputSymbols` as _output_symbols(self) -> SymbolTable

      # NOTE: These methods are wrapped in concrete child classes.
      #
      # def `Copy` as _copy(self, safe: bool = default) -> LogFst
      #
      # @classmethod
      # def `Read` as _read(cls, filename: str) -> LogFst
      #
      # def `Write` as _write(self, filename: str) -> bool


    # NOTE: We do not need these in Python.
    #
    # class `StateIterator<Fst<LogArc>>` as LogFstStateIterator:
    #
    #   def __init__(self, fst: LogFst)
    #
    #   def `Done` as _done(self) -> bool
    #
    #   def `Value` as _value(self) -> int
    #
    #   def `Next` as _next(self)
    #
    #   def `Reset` as _reset(self)
    #
    # class `ArcIterator<Fst<LogArc>>` as LogFstArcIterator:
    #
    #   def __init__(self, fst: LogFst, s: int)
    #
    #   def `Done` as _done(self) -> bool
    #
    #   def `Value` as _value(self) -> LogArc
    #
    #   def `Next` as _next(self)
    #
    #   def `Reset` as _reset(self)
    #
    #   def `Seek` as _seek(self, a: int)
    #
    #   def `Position` as _position(self) -> int
    #
    #   def `Flags` as _flags(self) -> int
    #
    #   def `SetFlags` as _set_flags(self, flags: int, mask: int)


    # LatticeArc

    class `Fst<ArcTpl<LatticeWeightTpl<float>>>` as LatticeFst:

      def `Start` as _start(self) -> int

      def `Final` as _final(self, state: int) -> LatticeWeight

      def `NumArcs` as _num_arcs(self, state: int) -> int

      def `NumInputEpsilons` as _num_input_epsilons(self, state: int) -> int

      def `NumOutputEpsilons` as _num_output_epsilons(self, state: int) -> int

      def `Properties` as _properties(self, mask: int, test: bool) -> int

      def `Type` as _type(self) -> str

      def `InputSymbols` as _input_symbols(self) -> SymbolTable

      def `OutputSymbols` as _output_symbols(self) -> SymbolTable

      # NOTE: These methods are wrapped in concrete child classes.
      #
      # def `Copy` as _copy(self, safe: bool = default) -> LatticeFst
      #
      # @classmethod
      # def `Read` as _read(cls, filename: str) -> LatticeFst
      #
      # def `Write` as _write(self, filename: str) -> bool


    # NOTE: We do not need these in Python.
    #
    # class `StateIterator<Fst<ArcTpl<LatticeWeightTpl<float>>>>` as LatticeFstStateIterator:
    #
    #   def __init__(self, fst: LatticeFst)
    #
    #   def `Done` as _done(self) -> bool
    #
    #   def `Value` as _value(self) -> int
    #
    #   def `Next` as _next(self)
    #
    #   def `Reset` as _reset(self)
    #
    # class `ArcIterator<Fst<ArcTpl<LatticeWeightTpl<float>>>>` as LatticeFstArcIterator:
    #
    #   def __init__(self, fst: LatticeFst, s: int)
    #
    #   def `Done` as _done(self) -> bool
    #
    #   def `Value` as _value(self) -> LatticeArc
    #
    #   def `Next` as _next(self)
    #
    #   def `Reset` as _reset(self)
    #
    #   def `Seek` as _seek(self, a: int)
    #
    #   def `Position` as _position(self) -> int
    #
    #   def `Flags` as _flags(self) -> int
    #
    #   def `SetFlags` as _set_flags(self, flags: int, mask: int)

    # CompactLatticeArc

    class `Fst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>>` as CompactLatticeFst:

      def `Start` as _start(self) -> int

      def `Final` as _final(self, state: int) -> CompactLatticeWeight

      def `NumArcs` as _num_arcs(self, state: int) -> int

      def `NumInputEpsilons` as _num_input_epsilons(self, state: int) -> int

      def `NumOutputEpsilons` as _num_output_epsilons(self, state: int) -> int

      def `Properties` as _properties(self, mask: int, test: bool) -> int

      def `Type` as _type(self) -> str

      def `InputSymbols` as _input_symbols(self) -> SymbolTable

      def `OutputSymbols` as _output_symbols(self) -> SymbolTable

      # NOTE: These methods are wrapped in concrete child classes.
      #
      # def `Copy` as _copy(self, safe: bool = default) -> CompactLatticeFst
      #
      # @classmethod
      # def `Read` as _read(cls, filename: str) -> CompactLatticeFst
      #
      # def `Write` as _write(self, filename: str) -> bool


    # NOTE: We do not need these in Python.
    #
    # class `StateIterator<Fst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>>>` as CompactLatticeFstStateIterator:
    #
    #   def __init__(self, fst: CompactLatticeFst)
    #
    #   def `Done` as _done(self) -> bool
    #
    #   def `Value` as _value(self) -> int
    #
    #   def `Next` as _next(self)
    #
    #   def `Reset` as _reset(self)
    #
    # class `ArcIterator<Fst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>>>` as CompactLatticeFstArcIterator:
    #
    #   def __init__(self, fst: CompactLatticeFst, s: int)
    #
    #   def `Done` as _done(self) -> bool
    #
    #   def `Value` as _value(self) -> CompactLatticeArc
    #
    #   def `Next` as _next(self)
    #
    #   def `Reset` as _reset(self)
    #
    #   def `Seek` as _seek(self, a: int)
    #
    #   def `Position` as _position(self) -> int
    #
    #   def `Flags` as _flags(self) -> int
    #
    #   def `SetFlags` as _set_flags(self, flags: int, mask: int)
