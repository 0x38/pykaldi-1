from "util/iostream-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "nnet3/nnet-example-clifwrap.h" import *
from "nnet3/nnet-computation-clifwrap.h" import *
from "nnet3/nnet-nnet-clifwrap.h" import *

from "nnet3/nnet-utils.h":
  namespace `kaldi::nnet3`:
    def EvaluateComputationRequest(nnet: Nnet, request: ComputationRequest)
        -> list<list<bool>>

    def NumOutputNodes(nnet: Nnet) -> int

    def NumInputNodes(nnet: Nnet) -> int

    def PerturbParams(stddev: float, nnet: Nnet)

    def DotProduct(nnet1: Nnet, nnet2: Nnet) -> float

    def ComponentDotProducts(nnet1: Nnet, nnet2: Nnet, dot_prod: VectorBase)

    def PrintVectorPerUpdatableComponent(nnet: Nnet, vec: VectorBase) -> str

    def IsSimpleNnet(nnet: Nnet) -> bool

    def ZeroComponentStats(nnet: Nnet)

    def ComputeSimpleNnetContext(nnet: Nnet) -> (left_context: int,
                                                 right_context: int)

    def SetLearningRate(learning_rate: float, nnet: Nnet)

    def ScaleNnet(scale: float, nnet: Nnet)

    def SetNnetAsGradient(nnet: Nnet)

    def AddNnet(src: Nnet, alpha: float, dest: Nnet)

    def AddNnetComponents(src: Nnet, alphas: Vector, scale: float,
                          dest: Nnet)

    def NnetIsRecurrent(nnet: Nnet) -> bool

    def NumParameters(src: Nnet) -> int

    def VectorizeNnet(src: Nnet, params: VectorBase)

    def UnVectorizeNnet(params: VectorBase, dest: Nnet)

    def NumUpdatableComponents(dest: Nnet) -> int

    def FreezeNaturalGradient(freeze: bool, nnet: Nnet)

    def ConvertRepeatedToBlockAffine(nnet: Nnet)

    def NnetInfo(nnet: Nnet) -> str

    def SetDropoutProportion(dropout_proportion: float, nnet: Nnet)

    def HasBatchnorm(nnet: Nnet) -> bool

    def SetBatchnormTestMode(test_mode: bool, nnet: Nnet)

    def RecomputeStats(egs: list<NnetExample>, nnet: Nnet)

    def SetDropoutTestMode(test_mode: bool, nnet: Nnet)

    def ResetGenerators(nnet: Nnet)

    def FindOrphanComponents(nnet: Nnet) -> list<int>

    def FindOrphanNodes(nnet: Nnet) -> list<int>

    class CollapseModelConfig:
      collapse_dropout: bool
      collapse_batchnorm: bool
      collapse_affine: bool
      collapse_scale: bool

    def CollapseModel(config: CollapseModelConfig, nnet: Nnet)

    def ReadEditConfig(config_file: istream, nnet: Nnet)

    def UpdateNnetWithMaxChange(delta_nnet: Nnet, max_param_change: float,
                                max_change_scale: float, scale: float,
                                nnet: Nnet)
        -> (suc: bool, num_max_change_per_component_applied: list<int>,
            num_max_change_global_applied: int)
