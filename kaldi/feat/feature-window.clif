from "matrix/kaldi-vector-clifwrap.h" import *
from "itf/options-itf-clifwrap.h" import *

from "feat/feature-window.h":
  namespace `kaldi`:
    class FrameExtractionOptions:
      samp_freq: float
      frame_shift_ms: float
      frame_length_ms: float
      dither: float
      preemph_coeff: float
      remove_dc_offset: bool
      window_type: str
      round_to_power_of_two: bool
      blackman_coeff: float
      snip_edges: bool
      allow_downsample: bool

      def `Register` as register(self, opts:OptionsItf)

      def `WindowShift` as window_shift(self) -> int

      def `WindowSize` as window_size(self) -> int

      def `PaddedWindowSize` as padded_window_size(self) -> int

    class FeatureWindowFunction:
      @add__init__
      def `FeatureWindowFunction` as from_options(self,
                                                  opts: FrameExtractionOptions)
      @add__init__
      def `FeatureWindowFunction` as from_other(self,
                                                other: FeatureWindowFunction)
      window: Vector

    def `NumFrames` as num_frames(num_samples: int, opts: FrameExtractionOptions,
                  flush: bool = default) -> int

    def `FirstSampleOfFrame` as first_sample_of_frame(frame: int, opts: FrameExtractionOptions) -> int

    def `Dither` as dither(waveform: VectorBase, dither_value: float)

    def `Preemphasize` as preemphasize(waveform: VectorBase, preemph_coeff: float)

    # FIXME(Dogan): Write helper functions in C++ to wrap these.
    # def ProcessWindow(opts: FrameExtractionOptions,
    #                   window_function: FeatureWindowFunction,
    #                   window: VectorBase) -> float
    #
    # def ExtractWindow(sample_offset: int, wave: VectorBase, f: int,
    #                   opts: FrameExtractionOptions,
    #                   window_function: FeatureWindowFunction) ->
    #                   (window: Vector, log_energy_pre_window: float)

    def `ExtractWaveformRemainder` as extract_waveform_remainder(wave: VectorBase,
                                 opts: FrameExtractionOptions,
                                 wave_remainder: Vector)
