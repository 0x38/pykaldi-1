# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Clif
scopeName: source.clif
fileTypes: ["clif"]
uuid: 67b6678b-acbd-4efc-9cd0-99484cd09ab5

patterns:
  - include: '#comments'
  - include: '#types'
  - include: '#keywords'

  - comment: String literal
    begin: \"
    beginCaptures:
      '0': {name: punctuation.definition.string.begin}
    end: \"
    endCaptures:
      '0': {name: punctuation.definition.string.end}
    name: string.quoted.double
    patterns:
    - include: '#string_escaped_char'

  - comment: Clif namespace
    name: meta.namespace.clif
    begin: \b(namespace)\s+\`
    beginCaptures:
      '1': {name: storage.type.namespace.clif}
    end: (\`\:)|\s*($\n?|#.*$\n?)
    endCaptures:
      '1': {name: punctuation.section.namespace.begin.clif}
      '2': {name: invalid.illegal.incorrect-namespace-name.clif}
    patterns:
    - contentName: entity.name.type.namespace.clif
      begin: (?=[[:alpha:]_][[:alnum:]_]*)
      end: (?![[:alnum:]_])
      patterns:
      - include: '#string_escaped_char'

  - comment: Clif class
    name: meta.class.clif 
    begin: \b(class)\s+
    beginCaptures:
      '1': {name: storage.type.class.clif}
    end: (\:)|\s*($\n?|#.*$\n?)
    endCaptures:
      '1': {name: punctuation.section.class.begin.clif}
      '2': {name: invalid.illegal.missing-section-begin.clif}
    patterns:
    - include: '#Crename'

    - name: entity.name.type.class.python.clif
      match: ([[:alpha:]_][[:alnum:]_]*(?=\:|\())

    - name: meta.class.inheritance.python
      begin: (\()
      beginCaptures:
        '1': {name: punctuation.definition.inheritance.begin.clif}
      end: (?=\)|:)
      patterns:
      - contentName: entity.other.inherited-class.clif
        begin: (?<=\(|,)\s*
        end: \s*(?:(,)|(?=\)))
        endCaptures:
          '1': {name: punctuation.separator.inheritance.clif}
        patterns:
        - include: $self

  - comment: Clif functions
    name: meta.function.clif
    begin: \b(def)\s+
    beginCaptures:
      '1': {name: storage.type.function.clif}
    end: ($\n?)
    patterns:
    # Possible C rename
    - include: '#Crename'

    # Function name
    - name: entity.name.function.clif
      match: ([[:alpha:]_][[:alnum:]_]*(?=\())

    # Parameter list
    - begin: (\()
      beginCaptures:
        '1': {name: punctuation.definition.parameters.begin.clif}
      end: (\))
      patterns:
      
      - match: (self)
        name: variable.parameter.parameter.function.language.clif

      - match: (,)
        name: punctuation.separator.parameters.clif

      - begin: ([[:alpha:]_][[:alnum:]_]*)\s*(\:)(?!\:)
        beginCaptures:
          '1': {name: meta.function-call.arguments.clif}
          '2': {name: keyword.operator.assignment.clif}
        end: \s*(?=(,)|\))
        # endCaptures:
        #   '1': {name: punctuation.separator.parameters.clif}
        patterns:
        - include: '#Crename'
        - include: '#types'

        # case for value assignation
        - begin: \s*(\=)\s*
          beginCaptures:
            '1': {name: keyword.operator.assignment.clif}
          end: \s*(?=(,)|\))
          patterns:
          - match: (default)
            name: variable.parameter.parameter.function.language.clif
          - match: ([[:alpha:]_][[:alnum:]_]*)
            name: variable.parameter.parameter.function.clif

    # Output type
    - name: meta.function.returnvalue.clif
      begin: (-\>)
      end: (?=$\n?)
      patterns:
      - include: '#types'

  - comment: Clif decorator
    name: meta.function.decorator.clif
    begin: (\@[[:alpha:]_][[:alnum:]_]*)
    beginCaptures:
      '1': {name: entity.name.function.decorator.clif}
    end: ($\n?)
    

repository:
  keywords:
    patterns:
    - match: \b(from|as|import|pass|enum|const)\b
      name: keyword.operator.control.clif

  string_escaped_char:
    patterns:
    - match: \w+
      name: constant.character.escape
  
  comments:
    patterns:
    - match: "#.*"
      name: comment.line.number-sign.clif

  types:
    patterns:
    - match: \b(int|bytes|str|bool|float|list|tuple|set|dict|object)\b
      name: support.type.clif

  cclass:
    patterns:
    - match: ([[:alpha:]][[:alnum:]_]*(<[[:alpha:]][[:alnum:]_]+>)?)
      name: entity.name.type.class.C.clif

  pythonclass:
    patterns:
    - match: ([[:alpha:]][[:alnum:]_]*)
      name: entity.name.type.class.python.clif

  Crename:
    patterns:
    - match: (\`([[:alpha:]_][[:alnum:]_]*)(<[[:alpha:]][[:alnum:]_]+>)?(\(\))?\`)\s+(as)
      captures:
        '1': {name: string.quoted.single}
        '5': {name: keyword.operator.clif}
      include: '#types'