from "matrix/kaldi-matrix-clifwrap.h" import *
from "hmm/transition-model-clifwrap.h" import *


from kaldi.itf._decodable_itf import DecodableInterface


from "decoder/decodable-matrix.h":
  namespace `kaldi`:
    class DecodableMatrixScaledMapped(DecodableInterface):
      def __init__(self, tm: TransitionModel, likes: Matrix, scale: float)

      # @add__init__
      # def `DecodableMatrixScaledMapped` as new(tm: TransitionModel, scale: float, likes:Matrix)

      def `NumFramesReady` as num_frames_ready(self) -> int

      def `IsLastFrame` as is_last_frame(self, frame: int) -> bool

      def `LogLikelihood` as log_likelihood(self, frame: int, tid: int) -> float

      def `NumIndices` as num_indices(self) -> int

    class DecodableMatrixMappedOffset(DecodableInterface):
      """
      This decodable class returns log-likes stored in a matrix; it supports repeatedly writing to the matrix and setting a time-offset representing the frame-index of the first row of the matrix. 
      """
      def __init__(self, tm:TransitionModel)

      def `NumFramesReady` as num_frames_ready(self) -> int

      def `FirstAvailableFrame` as first_available_frame(self) -> int

      def `AcceptLoglikes` as accept_log_likes(self, loglikes: Matrix, frames_to_discard: int)

      def `InputIsFinished` as input_is_finished(self)

      def `IsLastFrame` as is_last_frame(self, frame: int) -> bool

      def `LogLikelihood` as log_likelihood(self, frame: int, tid: int) -> float

      def `NumIndices` as num_indices(self) -> int

    class DecodableMatrixScaled(DecodableInterface):
      def __init__(self, likes: Matrix, scale: float)

      def `NumFramesReady` as num_frames_ready(self) -> int

      def `IsLastFrame` as is_last_frame(self, frame: int) -> bool

      def `LogLikelihood` as log_likelihood(self, frame: int, index: int) -> float

      def `NumIndices` as num_indices(self) -> int
