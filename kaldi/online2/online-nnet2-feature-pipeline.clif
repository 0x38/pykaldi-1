from "online2/online-ivector-feature-clifwrap.h" import *
from "itf/options-itf-clifwrap.h" import *
from "feat/feature-mfcc-clifwrap.h" import *
from "feat/feature-plp-clifwrap.h" import *
from "feat/feature-fbank-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "feat/pitch-functions-clifwrap.h" import *

from kaldi.itf._online_feature_itf import OnlineFeatureInterface

from "online2/online-nnet2-feature-pipeline.h":
  namespace `kaldi`:
    class OnlineNnet2FeaturePipelineConfig:
      feature_type: str
      mfcc_config: str
      plp_config: str
      fbank_config: str
      add_pitch: bool
      online_pitch_config: str
      ivector_extraction_config:str
      silence_weighting_config: OnlineSilenceWeightingConfig

      def `Register` as register(self, opts: OptionsItf)

    class OnlineNnet2FeaturePipelineInfo:

      @add__init__
      def `OnlineNnet2FeaturePipelineInfo` as new_with_config(self, config: OnlineNnet2FeaturePipelineConfig)

      def `FrameShiftInSeconds` as frame_shift_in_seconds(self) -> float

      feature_type: str

      mfcc_opts: MfccOptions

      plp_opts: PlpOptions

      fbank_opts: FbankOptions

      add_pitch: bool

      pitch_opts: PitchExtractionOptions

      pitch_process_opts: ProcessPitchOptions

      use_ivectors: bool

      # ivector_extractor_info: _OnlineIvectorExtractionInfo

      silence_weighting_config: OnlineSilenceWeightingConfig

      def `IvectorDim` as ivector_dim(self) -> int

    class OnlineNnet2FeaturePipeline(OnlineFeatureInterface):

      @add__init__
      def `OnlineNnet2FeaturePipeline` as new_with_info(self, info: OnlineNnet2FeaturePipelineInfo)

      def `Dim` as dim(self) -> int

      def `IsLastFrame` as is_last_frame(self, frame: int) -> bool

      def `NumFramesReady` as num_frames_ready(self) -> int

      def `GetFrame` as get_frame(self, frame:int, feat: VectorBase)

      def `SetAdaptationState` as set_adaptation_state(self, adaptation_state: OnlineIvectorExtractorAdaptationState)

      def `GetAdaptationState` as get_adaptation_state(self, adaptation_state: OnlineIvectorExtractorAdaptationState)

      def `AcceptWaveform` as accept_waveform(self, sampling_rate: float, waveform:VectorBase)

      def `FrameShiftInSeconds` as frame_shift_in_seconds(self) -> float

      def `InputFinished` as input_finished(self)

      def `IvectorFeature` as ivector_feature(self) -> OnlineIvectorFeature:
        """Returns the ivector-extracting part of the feature pipeline (or NULL if iVectors are not being used)."""

      def `InputFeature` as input_feature(self) -> OnlineIvectorFeature:
        """Returns a part of the feature pipeline that would be given as the primary (non-iVector) input to neural network in nnet3"""
