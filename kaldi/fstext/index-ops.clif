from "fstext/getters-clifwrap.h" import *
from "fstext/symbol-table-clifwrap.h" import *
from "fstext/float-weight-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/lexicographic-weight-clifwrap.h" import *
from "fstext/encode-clifwrap.h" import *
from "fstext/fst-clifwrap.h" import *
from "fstext/mutable-fst-clifwrap.h" import *
from "fstext/vector-fst-clifwrap.h" import *
# from "fstext/context-fst-clifwrap.h" import *
# from "fstext/deterministic-fst-clifwrap.h" import *

from "fstext/fst-ops.h":
  namespace `fst`:

## KWS Index Semiring

# Constant Ops

    def `FstToBytes` as to_bytes(fst: KwsIndexFst) -> bytes

    def `BytesToKwsIndexFst` as from_bytes(s: bytes) -> KwsIndexFst

    def `VerifyExt` as verify(fst: KwsIndexFst) -> bool

    def `CountStatesExt` as count_states(fst: KwsIndexFst) -> int

    def `CountArcsExt` as count_arcs(fst: KwsIndexFst) -> int

# In-place Mutation Ops

    def `ArcSortExt` as arcsort(fst: KwsIndexMutableFst, sort_type: ArcSortType)

    def `ClosureExt` as closure(fst: KwsIndexMutableFst, closure_type: ClosureType)

    def `ConcatExt` as concat(fst1: KwsIndexMutableFst, fst2: KwsIndexFst)

    def `ConnectExt` as connect(fst: KwsIndexMutableFst)

    def `DecodeExt` as decode(fst: KwsIndexMutableFst, mapper: KwsIndexEncodeMapper)

    def `EncodeExt` as encode(fst: KwsIndexMutableFst, mapper: KwsIndexEncodeMapper)

    def `InvertExt` as invert(fst: KwsIndexMutableFst)

    def `MinimizeExt` as minimize(
        fst: KwsIndexMutableFst, sfst: KwsIndexMutableFst = default,
        delta: float = default, allow_nondet: bool = default)

    def `ProjectExt` as project(fst: KwsIndexMutableFst, project_type: ProjectType)

    def `PruneExt` as prune(
        fst: KwsIndexMutableFst, weight_threshold: KwsIndexWeight,
        state_threshold: int = default, delta: float = default)

    def `PushExt` as push(fst: KwsIndexMutableFst, type: ReweightType,
                          delta: float = default,
                          remove_total_weight: bool = default)

    def `RelabelExt` as relabel(fst: KwsIndexMutableFst,
                                ipairs: list<tuple<int, int>>,
                                opairs: list<tuple<int, int>>)

    def `RelabelTables` as relabel_tables(
        fst: KwsIndexMutableFst,
        old_isymbols: SymbolTable, new_isymbols: SymbolTable,
        unknown_isymbol: str, attach_new_isymbols: bool,
        old_osymbols: SymbolTable, new_osymbols: SymbolTable,
        unknown_osymbol: str, attach_new_osymbols: bool)

    def `ReweightExt` as reweight(fst: KwsIndexMutableFst,
                                  potential: list<KwsIndexWeight>,
                                  type: ReweightType)

    def `RmEpsilonExt` as rmepsilon(
        fst: KwsIndexMutableFst, connect: bool = default,
        weight_threshold: KwsIndexWeight = default,
        state_threshold: int = default, delta: float = default)

    def `TopSortExt` as topsort(fst: KwsIndexMutableFst) -> bool

    def `UnionExt` as union(fst1: KwsIndexMutableFst, fst2: KwsIndexFst)

# Constructive Ops

    def `MapExt` as map(ifst: KwsIndexFst, ofst: KwsIndexMutableFst, map_type: MapType,
                     delta: float, weight: KwsIndexWeight)

    def `ComposeExt` as compose(ifst1: KwsIndexFst, ifst2: KwsIndexFst, ofst: KwsIndexMutableFst,
                             connect: bool, compose_filter: ComposeFilter)

    def `DeterminizeExt` as determinize(
        ifst: KwsIndexFst, ofst: KwsIndexMutableFst, delta: float = default,
        weight_threshold: KwsIndexWeight = default,
        state_threshold: int = default, subsequential_label: int = default,
        type: DeterminizeType = default,
        increment_subsequential_label: bool = default)

    def `DifferenceExt` as difference(ifst1: KwsIndexFst, ifst2: KwsIndexFst,
                                   ofst: KwsIndexMutableFst, connect: bool,
                                   compose_filter: ComposeFilter)

    def `DisambiguateExt` as disambiguate(
        ifst: KwsIndexFst, ofst: KwsIndexMutableFst, delta: float = default,
        weight_threshold: KwsIndexWeight = default,
        state_threshold: int = default, subsequential_label: int = default)

    def `EpsNormalizeExt` as epsnormalize(ifst: KwsIndexFst, ofst: KwsIndexMutableFst,
                                          type: EpsNormalizeType = default)

    def `EqualExt` as equal(ifst1: KwsIndexFst, ifst2: KwsIndexFst,
                            delta: float = default) -> bool

    def `EquivalentExt` as equivalent(ifst1: KwsIndexFst, ifst2: KwsIndexFst, delta: float)
        -> (result: bool, error: bool)

    def `IntersectExt` as intersect(ifst1: KwsIndexFst, ifst2: KwsIndexFst,
                                 ofst: KwsIndexMutableFst, connect: bool,
                                 compose_filter: ComposeFilter)

    def `IsomorphicExt` as isomorphic(ifst1: KwsIndexFst, ifst2: KwsIndexFst,
                                      delta: float = default) -> bool

    def `PruneExt` as prune_cons(ifst: KwsIndexFst, ofst: KwsIndexMutableFst,
                                 weight_threshold: KwsIndexWeight,
                                 state_threshold: int = default,
                                 delta: float = default)

    def `PushExt` as push_cons(ifst: KwsIndexFst, ofst: KwsIndexMutableFst,
                               flags: int, type: ReweightType, delta: float)

    def `RandEquivalentExt` as randequivalent(
        ifst1: KwsIndexFst, ifst2: KwsIndexFst, num_paths: int, delta: float,
        seed: int, selector_type: RandArcSelection, max_length: int)
        -> (result: bool, error: bool)

    def `RandGenExt` as randgen(ifst: KwsIndexFst, ofst: KwsIndexMutableFst,
                                seed: int, selector_type: RandArcSelection,
                                max_length: int, num_paths: int,
                                weighted: bool, remove_total_weight: bool)

    def `KwsIndexReplace` as replace(
        pairs: list<tuple<int, KwsIndexFst>>, ofst: KwsIndexMutableFst,
        root_label: int, call_label_type: ReplaceLabelType,
        return_label_type: ReplaceLabelType, return_label: int)

    def `ReverseExt` as reverse(ifst: KwsIndexFst, ofst: KwsIndexMutableFst,
                                require_superinitial: bool = default)

    def `RmEpsilonExt` as rmepsiloncons(
        ifst: KwsIndexFst, ofst: KwsIndexMutableFst, connect: bool = default,
        reverse: bool = default, queue_type: QueueType = default,
        delta: float = default, weight_threshold: KwsIndexWeight = default,
        state_threshold: int = default)

    def `ShortestDistanceExt` as shortestdistance(
        fst: KwsIndexFst, reverse: bool = default, source: int = default,
        queue_type: QueueType = default, delta: float = default)
        -> list<KwsIndexWeight>

    def `ShortestPathExt` as shortestpath(
        ifst: KwsIndexFst, ofst: KwsIndexMutableFst,
        nshortest: int = default, unique: bool = default,
        queue_type: QueueType = default, delta: float = default,
        weight_threshold: KwsIndexWeight = default,
        state_threshold: int = default)

    def `SynchronizeExt` as synchronize(ifst: KwsIndexFst, ofst: KwsIndexMutableFst)
