from "matrix/kaldi-matrix-clifwrap.h" import *

from kaldi.matrix import _postprocess_matrix

from "feat/wave-reader.h":
  namespace `kaldi`:

    class WaveData:
      """This class represents a Wave file."""

      @add__init__
      def `WaveData` as new(self, samp_freq:float, data:Matrix)

      def `Data` as data(self) -> Matrix:
        """Wrapper function for :kaldi:`kaldi::WaveData::Data`.

        This method returns the wave data. Data is a matrix because there may
        be multiple channels. In the normal case there is just one channel so
        the returned matrix will have just one row.

        Returns:
          :class:`kaldi.matrix.Matrix` with the wave data.
        """
        return _postprocess_matrix(...)

      samp_freq: float = property(`SampFreq`)
      """Sampling frequency"""

      duration: float = property(`Duration`)
      """Duration in seconds."""

      def `CopyFrom` as copy_from(self, other:WaveData)

      def `Clear` as clear(self)

      def `Swap` as swap(self, other:WaveData)
