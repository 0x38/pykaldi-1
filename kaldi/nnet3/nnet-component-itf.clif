from "base/iostream-clifwrap.h" import *
from "cudamatrix/cu-matrix-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "nnet3/nnet-common-clifwrap.h" import *
from "nnet3/nnet-misc-computation-info-clifwrap.h" import *
from "nnet3/nnet-parse-clifwrap.h" import *

from "nnet3/nnet-component-itf.h":
  capsule `void` as Void

  namespace `kaldi::nnet3`:
    class ComponentPrecomputedIndexes:
      def `Copy` as copy(self) -> ComponentPrecomputedIndexes

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      def `Type` as type(self) -> str

      @classmethod
      def `ReadNew` as read_new(cls, is: istream, binary: bool)
          -> ComponentPrecomputedIndexes

      @classmethod
      def `NewComponentPrecomputedIndexesOfType` as new_component_precomputed_indexes_of_type(cls, cpi_type: str)
          -> ComponentPrecomputedIndexes

    class Component:
      def `Propagate` as propagate(self, indexes: ComponentPrecomputedIndexes,
                    in: CuMatrixBase, out: CuMatrixBase) -> Void

      def `Backprop` as backprop(self, debug_info: str, indexes: ComponentPrecomputedIndexes,
                   in_value: CuMatrixBase, out_value: CuMatrixBase,
                   out_deriv: CuMatrixBase, memo: Void, to_update: Component,
                   in_deriv: CuMatrixBase)

      def `StoreStats` as store_stats(self, in_value: CuMatrixBase, out_value: CuMatrixBase,
                     memo: Void)

      def `ZeroStats` as zero_stats(self)

      def `GetInputIndexes` as get_input_indexes(self, misc_info: MiscComputationInfo,
                          output_index: Index) -> list<Index>

      # def IsComputable(self, misc_info: MiscComputationInfo,
      #                  output_index: Index, input_index_set: IndexSet)
      #     -> (ret: bool, used_inputs: list<Index>)

      # NOTE: This won't work as it is
      # def ReorderIndexes(self, input_indexes: list<Index>,
      #                    output_indexes: list<Index>)

      def `PrecomputeIndexes` as precompute_indexes(self, misc_info: MiscComputationInfo,
                            input_indexes: list<Index>,
                            output_indexes: list<Index>, need_backprop: bool)
          -> ComponentPrecomputedIndexes

      def `Type` as type(self) -> str

      def `InitFromConfig` as init_from_config(self, cfl: ConfigLine)

      def `InputDim` as input_dim(self) -> int

      def `OutputDim` as output_dim(self) -> int

      def `Properties` as properties(self) -> int

      @classmethod
      def `ReadNew` as read_new(cls, is: istream, binary: bool) -> Component

      def `Copy` as copy(self) -> Component

      @classmethod
      def `NewComponentOfType` as new_component_of_type(cls, type: str) -> Component

      def `Read` as read(self, is: istream, binary: bool)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Info` as info(self) -> str

      def `Scale` as scale(self, scale: float)

      def `Add` as add(self, alpha: float, other: Component)

      def `DeleteMemo` as delete_memo(self, memo: Void)

    class RandomComponent(Component):
      def `ResetGenerator` as reset_generator(self)

      def `SetTestMode` as set_test_mode(self, test_mode: bool)

    class UpdatableComponent(Component):
      # FIXME: Enabling copy constructor requires implementing pure virtual
      # methods of Component.
      # @add__init__
      # def `UpdatableComponent` as new_from_other(self,
      #                                            other: UpdatableComponent)

      def `DotProduct` as dot_product(self, other: UpdatableComponent) -> float

      def `PerturbParams` as perturb_params(self, stddev: float)

      def `SetUnderlyingLearningRate` as set_underlying_learning_rate(self, lrate: float)

      def `SetActualLearningRate` as set_actual_learning_rate(self, lrate: float)

      def `SetAsGradient` as set_as_gradient(self)

      def `FreezeNaturalGradient` as freeze_natural_gradient(self, freeze: bool)

      def `LearningRate` as learning_rate(self) -> float

      def `MaxChange` as max_change(self) -> float

      def `NumParameters` as num_parameters(self) -> int

      def `Vectorize` as vectorize(self, params: VectorBase)

      def `UnVectorize` as unvectorize(self, params: VectorBase)

    class NonlinearComponent(Component):
      # FIXME: Enabling copy constructor requires implementing pure virtual
      # methods of Component.
      # @add__init__
      # def `NonlinearComponent` as new_from_other(self,
      #                                            other: NonlinearComponent)

      # def ValueSum(self) -> CuDoubleVector
      # def DerivSum(self) -> CuDoubleVector

      def `Count` as count(self) -> float

    enum ComponentProperties with:
      `kSimpleComponent` as SIMPLE_COMPONENT
      `kUpdatableComponent` as UPDATABLE_COMPONENT
      `kPropagateInPlace` as PROPAGATE_IN_PLACE
      `kPropagateAdds` as PROPAGATE_ADDS
      `kReordersIndexes` as REORDERS_INDEXES
      `kBackpropAdds` as BACKPROP_ADDS
      `kBackpropNeedsInput` as BACKPROP_NEEDS_INPUT
      `kBackpropNeedsOutput` as BACKPROP_NEEDS_OUTPUT
      `kBackpropInPlace` as BACKPROP_IN_PLACE
      `kStoresStats` as STORES_STATS
      `kInputContiguous` as INPUT_CONTIGUOUS
      `kOutputContiguous` as OUTPUT_CONTIGUOUS
      `kUsesMemo` as USES_MEMO
      `kRandomComponent` as RANDOM_COMPONENT
