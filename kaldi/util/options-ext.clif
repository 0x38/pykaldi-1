from "itf/options-itf-clifwrap.h" import *

from "util/options-ext.h":
  namespace `kaldi`:

    class `SimpleOptionsExt` as SimpleOptions(OptionsItf):
      def `Register` as register_bool(self, name: str, ptr: bool, doc: str)
      def `Register` as register_int(self, name: str, ptr: `int32` as int, doc: str)
      def `Register` as register_uint(self, name: str, ptr: `uint32` as int, doc: str)
      def `Register` as register_float(self, name: str, ptr: `float` as float, doc: str)
      def `Register` as register_double(self, name: str, ptr: `double` as float, doc: str)
      def `Register` as register_str(self, name: str, ptr: str, doc: str)

      def `SetOption` as set_option_bool(self, key: str, value: bool) -> bool
      def `SetOptionInt` as set_option_int(self, key: str, value: int) -> bool
      def `SetOptionUInt` as set_option_uint(self, key: str, value: int) -> bool
      def `SetOptionFloat` as set_option_float(self, key: str, value: float) -> bool
      def `SetOptionDouble` as set_option_double(self, key: str, value: float) -> bool
      def `SetOption` as set_option_str(self, key: str, value: str) -> bool

      def `GetOption` as get_option_bool(self, key: str, value: bool) -> bool
      def `GetOption` as get_option_int(self, key: str, value: int) -> bool
      def `GetOption` as get_option_uint(self, key: str, value: int) -> bool
      def `GetOption` as get_option_float(self, key: str, value: float) -> bool
      def `GetOption` as get_option_double(self, key: str, value: float) -> bool
      def `GetOption` as get_option_str(self, key: str, value: str) -> bool

      enum OptionType with:
        `kBool` as BOOL
        `kInt32` as INT
        `kUint32` as UINT
        `kFloat` as FLOAT
        `kDouble` as DOUBLE
        `kString` as STRING

      class OptionInfo:
        doc: str
        type: OptionType
        def __init__(self, doc: str, type: OptionType)

      def `GetOptionInfoList` as get_option_info_list(self) -> list<tuple<str, OptionInfo>>

      def `GetOptionType` as get_option_type(self, key: str) -> (success: bool, type: OptionType)

    class `ParseOptionsExt` as ParseOptions(OptionsItf):
      def __init__(self, usage: str)

      @add__init__
      def `ParseOptionsExt` as from_other(self, prefix: str, other: OptionsItf)

      def `RegisterBool` as register_bool(self, name: str, value: bool, doc: str)
      def `RegisterInt` as register_int(self, name: str, value: `int32` as int, doc: str)
      def `RegisterUInt` as register_uint(self, name: str, value: `uint32` as int, doc: str)
      def `RegisterFloat` as register_float(self, name: str, value: `float` as float, doc: str)
      def `RegisterDouble` as register_double(self, name: str, value: `double` as float, doc: str)
      def `RegisterString` as register_str(self, name: str, value: str, doc: str)

      def `DisableOption` as disable_option(self, name: str)
      def `Read` as read(self, argv: list<str>) -> int
      def `PrintUsage` as print_usage(self, print_command_line: bool = default)

      def `PrintConfig` as print_config(self)
      def `ReadConfigFile` as read_config_file(self, filename: str)

      def `NumArgs` as num_args(self) -> int
      def `GetArg` as get_arg(self, param: int) -> str
      def `GetOptArg` as get_opt_arg(self, param: int) -> str

      class Options:
        bool_map: `std::map` as dict<str, bool>
        int_map: `std::map` as dict<str, int>
        uint_map: `std::map` as dict<str, int>
        float_map: `std::map` as dict<str, float>
        double_map: `std::map` as dict<str, float>
        str_map: `std::map` as dict<str, str>

      def `GetOptions` as get_options(self) -> Options

      @classmethod
      def `Escape` as escape(cls, str: str) -> str
