from "itf/options-itf-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/vector-fst-clifwrap.h" import *
from "hmm/transition-model-clifwrap.h" import *
from "tree/context-dep-clifwrap.h" import *

from kaldi.util import _value_error_on_false

from "decoder/training-graph-compiler.h":
  namespace `kaldi`:
    class TrainingGraphCompilerOptions:
      """Options for training graph compiler."""

      transition_scale: float
      """Scale of transition probabilities (excluding self-loops)."""
      self_loop_scale: float
      """Scale of self-loop vs. non-self-loop probability mass."""
      rm_eps: bool
      """Remove (most) epsilons before minimization.

      Applicable only if disambiguation symbols are present.
      """
      reorder: bool
      """Reorder transition IDs for greater decoding efficiency."""

      def __init__(self, transition_scale: float = default,
                   self_loop_scale: float = default, reorder: bool = default)

      def `Register` as register(self, opts: OptionsItf):
        """Registers options with an object implementing the options interface.

        Args:
          opts (OptionsItf): An object implementing the options interface.
            Typically a command-line option parser.
        """

    class TrainingGraphCompiler:
      def __init__(self, trans_model: TransitionModel,
                   ctx_dep: ContextDependency, lex_fst: StdVectorFst,
                   disambig_syms: list<int>,
                   opts: TrainingGraphCompilerOptions)

      def `CompileGraph` as compile_graph(self, word_fst: StdVectorFst)
        -> (success: bool, out_fst: StdVectorFst):
        return _value_error_on_false(...)

      # NOTE:
      # This method is wrapped via a shim in training-graph-compiler.h.
      #
      # def `CompileGraphs` as compile_graphs(self, word_fsts: list<StdVectorFst>)
      #   -> (success: bool, out_fsts: list<StdVectorFst>):
      #   return _value_error_on_false(...)

      def `CompileGraphFromText` as compile_graph_from_text(self, transcript: list<int>)
        -> (success: bool, out_fst: StdVectorFst):
        return _value_error_on_false(...)

      def `CompileGraphsFromText` as compile_graphs_from_text(self, transcripts: list<list<int>>)
        -> (success: bool, out_fsts: list<StdVectorFst>):
        return _value_error_on_false(...)
