from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/packed-matrix-clifwrap.h" import *
from "matrix/sp-matrix-clifwrap.h" import *
from "matrix/tp-matrix-clifwrap.h" import *

from "matrix/kaldi-vector-ext.h":
  namespace `kaldi`:
    def AddMatVec(self: VectorBase, alpha: float, M: MatrixBase,
                  trans: MatrixTransposeType, v: VectorBase, beta: float)

    def AddMatSvec(self: VectorBase, alpha: float, M: MatrixBase,
                   trans: MatrixTransposeType, v: VectorBase, beta: float)

    def AddSpVec(self: VectorBase, alpha: float, M: SpMatrix,
                 v: VectorBase, beta: float)

    def AddTpVec(self: VectorBase, alpha: float, M: TpMatrix,
                 trans: MatrixTransposeType, v: VectorBase, beta: float)

    def MulTp(self: VectorBase, M: TpMatrix, trans: MatrixTransposeType)

    def Solve(self: VectorBase, M: TpMatrix, trans: MatrixTransposeType)

    def CopyRowsFromMat(self: VectorBase, M: MatrixBase)

    def CopyColsFromMat(self: VectorBase, M: MatrixBase)

    def CopyRowFromMat(self: VectorBase, M: MatrixBase, row: int)

    def CopyColFromMat(self: VectorBase, M: MatrixBase, col: int)

    def CopyDiagFromMat(self: VectorBase, M: MatrixBase)

    def CopyFromPacked(self: VectorBase, M: PackedMatrix)

    def CopyDiagFromPacked(self: VectorBase, M: PackedMatrix)

    def CopyDiagFromSp(self: VectorBase, M: SpMatrix)

    def CopyDiagFromTp(self: VectorBase, M: TpMatrix)

    def AddRowSumMat(self: VectorBase, alpha: float, M: MatrixBase,
                     beta: float = default)

    def AddColSumMat(self: VectorBase, alpha: float, M: MatrixBase,
                     beta: float = default)

    def AddDiagMat2(self: VectorBase, alpha: float,
                    M: MatrixBase, trans: MatrixTransposeType = default,
                    beta: float = default)

    def AddDiagMatMat(self: VectorBase, alpha: float,
                      M: MatrixBase, transM: MatrixTransposeType,
                      N: MatrixBase, transN: MatrixTransposeType,
                      beta: float = default)

    def VecMatVec(v1: VectorBase, M: MatrixBase, v2: VectorBase) -> float
