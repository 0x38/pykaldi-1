from "fstext/weight-clifwrap.h" import *

from kaldi.fstext._float_weight import FloatWeight

from "fstext/arctic-weight-ext.h":
  namespace `fst`:
    class `ArcticWeightTpl<float>` as ArcticWeight(FloatWeight):
      """Arctic weight."""

      @add__init__
      def `ArcticWeightTpl` as from_float(self, f: float):
        """Create a new arctic weight from a float."""

      @add__init__
      def `ArcticWeightTpl` as from_other(self, weight: ArcticWeight):
        """Create a new arctic weight from another."""

      @classmethod
      def `Zero` as zero(cls) -> ArcticWeight:
        """Zero in arctic semiring, i.e. float -infinity."""

      @classmethod
      def `One` as one(cls) -> ArcticWeight:
        """One in arctic semiring, i.e. 0.0."""

      @classmethod
      def `NoWeight` as noweight(cls) -> ArcticWeight:
        """No weight in arctic semiring."""
      @classmethod
      def `Type` as type(cls) -> str:
        """Returns weight type."""

      @classmethod
      def Properties(cls) -> int:
        """Returns weight properties."""

      def Member(self) -> bool:
        """Checks if weight is a member of the arctic semiring."""

      def Quantize(self, delta: float = default) -> ArcticWeight:
        """Quantizes the weight."""

      def Reverse(self) -> ArcticWeight:
        """Reverses the weight."""

    def `Plus` as plus_arctic_weight(w1: ArcticWeight,
                                     w2: ArcticWeight) -> ArcticWeight:
      """:math:`\\oplus` operation in the arctic semiring."""

    def `Times` as times_arctic_weight(w1: ArcticWeight,
                                       w2: ArcticWeight) -> ArcticWeight:
      """:math:`\\otimes` operation in the arctic semiring."""

    def `Divide` as divide_arctic_weight(w1: ArcticWeight, w2: ArcticWeight,
                                         typ: DivideType = default) -> ArcticWeight:
      """:math:`\\oslash` operation in the arctic semiring."""
