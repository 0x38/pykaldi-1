from "base/iostream-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *

from kaldi.matrix import _matrix_wrapper

from "feat/wave-reader.h":
  namespace `kaldi`:

    class WaveData:
      """This class represents a Wave file."""

      @add__init__
      def `WaveData` as new(self, samp_freq:float, data:MatrixBase)

      def `Read` as read(self, is: istream) -> self

      def `Write` as write(self, os: ostream) -> self

      def `Data` as data(self) -> Matrix:
        """Returns the wave data.

        Data is a matrix because there may be multiple channels.
        If the wave data is mono, the returned matrix will have just one row.

        Returns:
          :class:`kaldi.matrix.Matrix` with the wave data.
        """
        return _matrix_wrapper(...)

      samp_freq: float = property(`SampFreq`)
      """Sampling frequency"""

      duration: float = property(`Duration`)
      """Duration in seconds."""

      def `CopyFrom` as copy_from(self, other:WaveData) -> self

      def `Clear` as clear(self) -> self

      def `Swap` as swap(self, other:WaveData) -> self
