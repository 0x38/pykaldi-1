from "fstext/float-weight-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/arc-clifwrap.h" import *
from "fstext/symbol-table-clifwrap.h" import *

from kaldi.fstext._expanded_fst import StdExpandedFst
from kaldi.fstext._expanded_fst import LogExpandedFst
from kaldi.fstext._expanded_fst import LatticeExpandedFst
from kaldi.fstext._expanded_fst import CompactLatticeExpandedFst

from "fst/mutable-fst.h":
  namespace `fst`:

    # StdArc

    class `MutableFst<StdArc>` as StdMutableFst(StdExpandedFst):

      def SetStart(self, state: int)

      def SetFinal(self, state: int, weight: TropicalWeight)

      def SetProperties(self, props: int, mask: int)

      def AddState(self) -> int

      def AddArc(self, state: int, arc: StdArc)

      def DeleteStates(self, dstates: list<int>)

      def `DeleteStates` as DeleteAllStates(self)

      def DeleteArcs(self, state: int, n: int)

      def `DeleteArcs` as DeleteAllArcs(self, state: int)

      def ReserveStates(self, n: int)

      def ReserveArcs(self, state: int, n: int)

      def MutableInputSymbols(self) -> SymbolTable

      def MutableOutputSymbols(self) -> SymbolTable

      def SetInputSymbols(self, isyms: SymbolTable)

      def SetOutputSymbols(self, osyms: SymbolTable)

      def Copy(self, safe: bool = default) -> StdMutableFst

      @classmethod
      def Read(cls, filename: str, convert: bool = default,
               convert_type: str = default) -> StdMutableFst

    class `MutableArcIterator<MutableFst<StdArc>>` as StdFstMutableArcIterator:

      def __init__(self, fst: StdMutableFst, s: int)

      def Done(self) -> bool

      def Value(self) -> StdArc

      def SetValue(self, arc: StdArc)

      def Next(self)

      def Position(self) -> int

      def Reset(self)

      def Seek(self, a: int)

      def Flags(self) -> int

      def SetFlags(self, flags: int, mask: int)

    # LogArc

    class `MutableFst<LogArc>` as LogMutableFst(LogExpandedFst):

      def SetStart(self, state: int)

      def SetFinal(self, state: int, weight: LogWeight)

      def SetProperties(self, props: int, mask: int)

      def AddState(self) -> int

      def AddArc(self, state: int, arc: LogArc)

      def DeleteStates(self, dstates: list<int>)

      def `DeleteStates` as DeleteAllStates(self)

      def DeleteArcs(self, state: int, n: int)

      def `DeleteArcs` as DeleteAllArcs(self, state: int)

      def ReserveStates(self, n: int)

      def ReserveArcs(self, state: int, n: int)

      def MutableInputSymbols(self) -> SymbolTable

      def MutableOutputSymbols(self) -> SymbolTable

      def SetInputSymbols(self, isyms: SymbolTable)

      def SetOutputSymbols(self, osyms: SymbolTable)

      def Copy(self, safe: bool = default) -> LogMutableFst

      @classmethod
      def Read(cls, filename: str, convert: bool = default,
               convert_type: str = default) -> LogMutableFst

    class `MutableArcIterator<MutableFst<LogArc>>` as LogFstMutableArcIterator:

      def __init__(self, fst: LogMutableFst, s: int)

      def Done(self) -> bool

      def Value(self) -> LogArc

      def SetValue(self, arc: LogArc)

      def Next(self)

      def Position(self) -> int

      def Reset(self)

      def Seek(self, a: int)

      def Flags(self) -> int

      def SetFlags(self, flags: int, mask: int)

    # LatticeArc

    class `MutableFst<ArcTpl<LatticeWeightTpl<float>>>` as LatticeMutableFst(LatticeExpandedFst):

      def SetStart(self, state: int)

      def SetFinal(self, state: int, weight: LatticeWeight)

      def SetProperties(self, props: int, mask: int)

      def AddState(self) -> int

      def AddArc(self, state: int, arc: LatticeArc)

      def DeleteStates(self, dstates: list<int>)

      def `DeleteStates` as DeleteAllStates(self)

      def DeleteArcs(self, state: int, n: int)

      def `DeleteArcs` as DeleteAllArcs(self, state: int)

      def ReserveStates(self, n: int)

      def ReserveArcs(self, state: int, n: int)

      def MutableInputSymbols(self) -> SymbolTable

      def MutableOutputSymbols(self) -> SymbolTable

      def SetInputSymbols(self, isyms: SymbolTable)

      def SetOutputSymbols(self, osyms: SymbolTable)

      def Copy(self, safe: bool = default) -> LatticeMutableFst

      @classmethod
      def Read(cls, filename: str, convert: bool = default,
               convert_type: str = default) -> LatticeMutableFst

    class `MutableArcIterator<MutableFst<ArcTpl<LatticeWeightTpl<float>>>>` as LatticeFstMutableArcIterator:

      def __init__(self, fst: LatticeMutableFst, s: int)

      def Done(self) -> bool

      def Value(self) -> LatticeArc

      def SetValue(self, arc: LatticeArc)

      def Next(self)

      def Position(self) -> int

      def Reset(self)

      def Seek(self, a: int)

      def Flags(self) -> int

      def SetFlags(self, flags: int, mask: int)

    # CompactLatticeArc

    class `MutableFst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>>` as CompactLatticeMutableFst(CompactLatticeExpandedFst):

      def SetStart(self, state: int)

      def SetFinal(self, state: int, weight: CompactLatticeWeight)

      def SetProperties(self, props: int, mask: int)

      def AddState(self) -> int

      def AddArc(self, state: int, arc: CompactLatticeArc)

      def DeleteStates(self, dstates: list<int>)

      def `DeleteStates` as DeleteAllStates(self)

      def DeleteArcs(self, state: int, n: int)

      def `DeleteArcs` as DeleteAllArcs(self, state: int)

      def ReserveStates(self, n: int)

      def ReserveArcs(self, state: int, n: int)

      def MutableInputSymbols(self) -> SymbolTable

      def MutableOutputSymbols(self) -> SymbolTable

      def SetInputSymbols(self, isyms: SymbolTable)

      def SetOutputSymbols(self, osyms: SymbolTable)

      def Copy(self, safe: bool = default) -> CompactLatticeMutableFst

      @classmethod
      def Read(cls, filename: str, convert: bool = default,
               convert_type: str = default) -> CompactLatticeMutableFst

    class `MutableArcIterator<MutableFst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>>>` as CompactLatticeFstMutableArcIterator:

      def __init__(self, fst: CompactLatticeMutableFst, s: int)

      def Done(self) -> bool

      def Value(self) -> CompactLatticeArc

      def SetValue(self, arc: CompactLatticeArc)

      def Next(self)

      def Position(self) -> int

      def Reset(self)

      def Seek(self, a: int)

      def Flags(self) -> int

      def SetFlags(self, flags: int, mask: int)
