
from "base/iostream-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "nnet3/nnet-nnet-clifwrap.h" import *

from "nnet3/am-nnet-simple.h":
  namespace `kaldi::nnet3`:
    class AmNnetSimple:
      @add__init__
      def `AmNnetSimple` as from_other(self, other: AmNnetSimple)

      @add__init__
      def `AmNnetSimple` as from_nnet(self, nnet: Nnet)

      def `NumPdfs` as num_pdfs(self) -> int

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      def `GetNnet` as get_nnet(self) -> Nnet

      def `SetNnet` as set_nnet(self, nnet: Nnet)

      def `SetPriors` as set_priors(self, priors: VectorBase)

      # def Priors(self) -> VectorBase

      def `Info` as info(self) -> str

      def `LeftContext` as left_context(self) -> int

      def `RightContext` as right_context(self) -> int

      def `InputDim` as input_dim(self) -> int

      def `IvectorDim` as ivector_dim(self) -> int

      def `SetContext` as set_context(self)
