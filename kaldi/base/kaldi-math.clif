
from "base/kaldi-math.h":
  namespace `kaldi`:

    class RandomState:
      seed: int

    def `Rand` as rand(state: RandomState = default) -> int:
        """Returns a random integer between 0 and RAND_MAX, inclusive."""

    def `RandInt` as _rand_int(first: int, last: int, state: RandomState = default) -> int:
        """Returns a random integer between first and last inclusive. Should not be called directly, instead call it via math.py"""

    def `WithProb` as _with_prob(prob:float, state: RandomState = default) -> bool:
        """This function should not be called directly, instead call it using with_prob from math.py"""

    def `RandUniform` as rand_uniform(state: RandomState = default) -> float:
        """Returns a random number strictly between 0 and 1."""

    def `RandGauss` as rand_gauss(state: RandomState = default) -> float

    def `RandPoisson` as rand_poisson(lambda: float, state: RandomState = default) -> int:
        """Returns poisson-distributed random number."""

    # NOTE (VM):
    # This were included in kaldi-math-ext.h
    # def RandGauss2(a:float, b:float, state: RandomState = default)
    # def LogAdd(x:float, y:float) -> float
    # def Hypot(x:float, y:float) -> float

    def `RandPrune` as float_rand_prune(post:float, prune_tresh:float, state: RandomState = default) -> float:
        """Randomized pruning mechanism that preserves expectations, typically used to prune posteriors."""

    def `ApproxEqual` as approx_equal(a:float, b:float, relative_tolerance:float = default) -> bool:
        """Return abs(a - b) <= relative_tolerance * (abs(a) + abs(b))"""

    def `RoundUpToNearestPowerOfTwo` as _round_up_to_nearest_power_of_two(n:int) -> int:
        """Should not be called directly. Instead call it from math.py"""

    def `DivideRoundingDown` as divide_rounding_down(a:int, b:int) -> int:
        """Returns the division"""

    def `Gcd` as gcd(m:int, n:int) -> int:
        """Returns the greatest common divisor of two integers."""

    def `Lcm` as _lcm(m:int, n:int) -> int:
        """Returns the least common multiple of two integers.
        This function should not be called directly, instead call it from math.py"""

    def `Factorize` as _factorize(m:int) -> (factors:list<int>):
        """Returns the decomposiion of m into its prime factors.
        This function should not be called directly, instead call it using factorize(x) from math.py"""
