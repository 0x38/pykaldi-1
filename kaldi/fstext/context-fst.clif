from "base/iostream-clifwrap.h" import *
from "fstext/symbol-table-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/arc-clifwrap.h" import *
from "fstext/fst-clifwrap.h" import *
from "fstext/mutable-fst-clifwrap.h" import *
from "fstext/vector-fst-clifwrap.h" import *


from "fstext/context-fst.h":
  namespace `fst`:
    class `ContextFst<StdArc>` as StdContextFst(StdFst):
      def __init__(self, subsequential_symbol: int, phones: list<int>,
                   disambig_syms: list<int>, N: int, P: int)

      @add__init__
      def `ContextFst` as from_other(self, fst: StdContextFst,
                                     safe: bool = default)

      def `Copy` as copy(self, safe: bool = default) -> StdContextFst

      def `CreateArc` as create_arc(self, s: int, olabel: int)
          -> (success: bool, oarc: StdArc)

      def `ILabelInfo` as ilabel_info(self) -> list<list<int>>

    # FIXME:
    # Definitions are in context-fst-inl.h.
    # def `WriteILabelInfo` as write_ilabel_info(os: ostream, binary: bool,
    #                                            info: list<list<int>>)
    #
    # def `ReadILabelInfo` as read_ilabel_info(is: istream, binary: bool)
    #     -> list<list<int>>
    #
    # def `CreateILabelInfoSymbolTable` as create_ilabel_info_symbol_table(
    #     info: list<list<int>>, phones_symtab: SymbolTable,
    #     separator: str, disambig_prefix: str) -> SymbolTable

    class `StateIterator<ContextFst<StdArc>>` as StdContextFstStateIterator:

      def __init__(self, fst: StdContextFst)

      def Done(self) -> bool

      def Value(self) -> int

      def Next(self)

      def Reset(self)

    class `ArcIterator<ContextFst<StdArc>>` as StdContextFstArcIterator:

      def __init__(self, fst: StdContextFst, s: int)

      def Done(self) -> bool

      def Value(self) -> StdArc

      def Next(self)

      def Reset(self)

      def Seek(self, a: int)

      def Position(self) -> int

      def Flags(self) -> int

      def SetFlags(self, flags: int, mask: int)

    # ComposeContextFst is wrapped in fst-operations.clif.
