from "base/iostream-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/sp-matrix-clifwrap.h" import *
from "gmm/model-common-clifwrap.h" import *

from "gmm/full-gmm.h":
    namespace `kaldi`:
        class FullGmm:
            @add__init__
            def `FullGmm` as from_other(self, gmm: FullGmm)

            @add__init__
            def `FullGmm` as from_nmix_dim(self, nmix:int, dim: int)

            def `Resize` as resize(self, nmix: int, dim: int):
              """Resizes arrays to this dim. Does not init data."""

            def `NumGauss` as num_gauss(self) -> int:
              """Returns the number of mixture components."""

            def `Dim` as dim(self) -> int:
              """Returns the dimensionality of the Gaussian mean vectors."""

            def `CopyFromFullGmm` as copy_from_full(self, fullgmm: FullGmm):
              """Copies from given :class:`FullGmm`"""

            # def CopyFromDiagGmm(self, diaggmm: DiagGmm)

            def `LogLikelihood` as log_likelihood(self, data: VectorBase) -> float:
              """Returns the log-likelihood of a data point given the GMM.

              Args:
                data (:class:`kaldi.matrix.VectorBase`) - data point
              """

            def `LogLikelihoods` as log_likelihoods(self, data:VectorBase) -> Vector:
              """Output the per-component distribution to the log-likelihood

              Args:
                data (:class:`kaldi.matrix.VectorBase`) - data point
              """ 

            def `LogLikelihoodsPreselect` as log_likelihoods_preselect(self, data:VectorBase, indices:list<int>) -> Vector:
              """Outputs the per-component log-likelihoods of a subset of mixture components.

              Args:
                data (:class:`kaldi.matrix.VectorBase`) - data point
                indices - list of indices
              """

            def `GaussianSelection` as gaussian_selection(self, data: VectorBase, num_gselect: int) -> (log_like: float, output: list<int>):
              """Get gaussian selection information for one frame. 

              Args:
                data (:class:`kaldi.matrix.VectorBase`) - data point
                num_gselect (int) - Output is the best "num_gselect" indices, sorted from best to worst.

              Returns:
                log-likelihood for this frame.   
              """

            def `GaussianSelectionPreselect` as gaussian_selection_preselect(self, data: VectorBase, preselect: list<int>, num_gselect: int) -> (log_like: float, posteriors: list<int>):
              """Get gaussian selection information for one frame.

              Args:
                data (:class:`kaldi.matrix.VectorBase`) - data point
                preselect (list) - subset of mixture components
                num_gselect (int) - Output is the best "num_gselect" indices, sorted from best to worst.

              Returns:
                Log-like for this frame.
              """

            def `ComponentPosteriors` as _component_posteriors(self, data:VectorBase, posterior:VectorBase) -> float:
              """Computes the posterior probabilities of all Gaussian components given a data point.

              Args:
                data (:class:`kaldi.matrix.VectorBase`) - data point
                posterior (:class:`kaldi.matrix.VectorBase`) - output vector

              Returns:
                Log-likehood of the data given the GMM.

              """

            def `ComponentLogLikelihood` as component_log_likelihood(self, data: VectorBase, comp_id: int) -> float:
              """Computes the contribution log-likelihood of a data point from a single Gaussian component.

              Args:
                data (:class:`kaldi.matrix.VectorBase`) - data point
                comp_id - component id

              Returns:
                Log-likehood for a given component
              """

            def `ComputeGconsts` as compute_gconsts(self) -> int:
              """Sets the gconsts.

              Returns:
                Number that are invalid e.g. because of zero weights or variances.
              """ 

            # See note from diag-gmm
            # def Split

            def `Perturb` as perturb(self, pertub_factor: float):
              """Perturbs the component means with a random vector multiplied by the pertrub factor."""

            # See note from diag-gmm
            # def Merge
            # def MergePreselect

            def `Write` as write(self, os: ostream, binary: bool)
            def `Read` as read(self, is: istream, binary: bool)

            def `Interpolate` as interpolate(self, rho: float, source: FullGmm, flags: int = default):
              """
                this <- rho * source + (1 - rho) * this
              """

            gconsts_: Vector = property(`gconsts`)
            weights_: Vector = property(`weights`)
            means_invcovars_: Matrix = property(`means_invcovars`)
            inv_covars_: list<SpMatrix> = property(`inv_covars`, `SetInvCovars`)

            def `SetWeights` as _set_weights(self, w: Vector)

            def `SetMeans` as _set_means(self, m: Matrix)

            def `SetInvCovarsAndMeans` as set_inv_covars_and_means(self, invcovars:list<SpMatrix>, means:Matrix):
              """Updates both means and (inverse) covariances.

              Args:
                invcovars (list of :class:`SpMatrix`): List of inverse covariances
                means (:class:`kaldi.matrix.Matrix`): matrix of means 
              """

            def `SetInvCovarsAndMeansInvCovars` as set_inv_covars_and_means_inv_covars(self, invcovars:list<SpMatrix>, means_invcovars:Matrix):
              """Use this if setting both, in the class's native format.

              Args:
                invcovars (list of :class:`SpMatrix`): List of inverse covariances
                means_invcovars (:class:`kaldi.matrix.Matrix`): matrix of means and invcovars 
              """

            def `GetCovars` as get_covars_(self) -> list<SpMatrix>:
              """Accessor for covariances."""

            def `GetMeans` as get_means(self) -> Matrix:
              """Accessor for means."""

            def `GetCovarsAndMeans` as get_covars_and_means(self) -> (covars:list<SpMatrix>, means: Matrix):
              """Accessor for covariances and means."""

            def `RemoveComponent` as remove_component(self, gauss: int, renorm_weights: bool):
              """Mutators for single component, supports float or double Removes single component from model."""

            def `RemoveComponents` as remove_components(self, gauss: list<int>, renorm_weights: bool):
              """Removes multiple components from model; "gauss" must not have dups."""

            def `GetComponentMean` as get_component_mean(self, gauss: int, out: VectorBase):
              """Accessor for component mean."""






