from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/symbol-table-clifwrap.h" import *
from "fstext/vector-fst-clifwrap.h" import *
from "base/iostream-clifwrap.h" import *

from kaldi.fstext import StdFst
from kaldi.fstext import LogFst
from kaldi.fstext import LatticeFst
from kaldi.fstext import CompactLatticeFst

from "fst/script/compile-impl.h":
  namespace `fst`:

    class `FstCompiler<StdArc>` as StdFstCompiler:
      def __init__(self, istrm: istream, source: str, isyms: SymbolTable,
                   osyms: SymbolTable, ssyms: SymbolTable, accep: bool,
                   ikeep: bool, okeep: bool, nkeep: bool,
                   allow_negative_labels: bool = default)

      @add__init__
      def `FstCompiler` as with_symbols(self, istrm: istream, source: str,
                                        isyms: SymbolTable, osyms: SymbolTable,
                                        ssyms: SymbolTable, accep: bool,
                                        ikeep: bool, okeep: bool, nkeep: bool,
                                        allow_negative_labels: bool,
                                        add_symbols: bool)

      def `Init` as init(self, istrm: istream, source: str, isyms: SymbolTable,
                         osyms: SymbolTable, ssyms: SymbolTable, accep: bool,
                         ikeep: bool, okeep: bool, nkeep: bool,
                         allow_negative_labels: bool, add_symbols: bool)

      def `Fst` as fst(self) -> StdVectorFst:
        return StdFst(...)

    class `FstCompiler<LogArc>` as LogFstCompiler:
      def __init__(self, istrm: istream, source: str, isyms: SymbolTable,
                   osyms: SymbolTable, ssyms: SymbolTable, accep: bool,
                   ikeep: bool, okeep: bool, nkeep: bool,
                   allow_negative_labels: bool = default)

      @add__init__
      def `FstCompiler` as with_symbols(self, istrm: istream, source: str,
                                        isyms: SymbolTable, osyms: SymbolTable,
                                        ssyms: SymbolTable, accep: bool,
                                        ikeep: bool, okeep: bool, nkeep: bool,
                                        allow_negative_labels: bool,
                                        add_symbols: bool)

      def `Init` as init(self, istrm: istream, source: str, isyms: SymbolTable,
                         osyms: SymbolTable, ssyms: SymbolTable, accep: bool,
                         ikeep: bool, okeep: bool, nkeep: bool,
                         allow_negative_labels: bool, add_symbols: bool)

      def `Fst` as fst(self) -> LogVectorFst:
        return LogFst(...)

    class `FstCompiler<ArcTpl<LatticeWeightTpl<float>>>` as LatticeFstCompiler:
      def __init__(self, istrm: istream, source: str, isyms: SymbolTable,
                   osyms: SymbolTable, ssyms: SymbolTable, accep: bool,
                   ikeep: bool, okeep: bool, nkeep: bool,
                   allow_negative_labels: bool = default)

      @add__init__
      def `FstCompiler` as with_symbols(self, istrm: istream, source: str,
                                        isyms: SymbolTable, osyms: SymbolTable,
                                        ssyms: SymbolTable, accep: bool,
                                        ikeep: bool, okeep: bool, nkeep: bool,
                                        allow_negative_labels: bool,
                                        add_symbols: bool)

      def `Init` as init(self, istrm: istream, source: str, isyms: SymbolTable,
                         osyms: SymbolTable, ssyms: SymbolTable, accep: bool,
                         ikeep: bool, okeep: bool, nkeep: bool,
                         allow_negative_labels: bool, add_symbols: bool)

      def `Fst` as fst(self) -> LatticeVectorFst:
        return LatticeFst(...)

    class `FstCompiler<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>>`
        as CompactLatticeFstCompiler:
      def __init__(self, istrm: istream, source: str, isyms: SymbolTable,
                   osyms: SymbolTable, ssyms: SymbolTable, accep: bool,
                   ikeep: bool, okeep: bool, nkeep: bool,
                   allow_negative_labels: bool = default)

      @add__init__
      def `FstCompiler` as with_symbols(self, istrm: istream, source: str,
                                        isyms: SymbolTable, osyms: SymbolTable,
                                        ssyms: SymbolTable, accep: bool,
                                        ikeep: bool, okeep: bool, nkeep: bool,
                                        allow_negative_labels: bool,
                                        add_symbols: bool)

      def `Init` as init(self, istrm: istream, source: str, isyms: SymbolTable,
                         osyms: SymbolTable, ssyms: SymbolTable, accep: bool,
                         ikeep: bool, okeep: bool, nkeep: bool,
                         allow_negative_labels: bool, add_symbols: bool)

      def `Fst` as fst(self) -> CompactLatticeVectorFst:
        return CompactLatticeFst(...)
