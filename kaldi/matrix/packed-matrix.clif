from "util/iostream-clifwrap.h" import *
from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/matrix-ext.h" import *

from "matrix/packed-matrix.h":
  namespace `kaldi`:
    class `PackedMatrix<float>` as PackedMatrix:
      _num_rows: int = property(`NumRows`)
      _num_cols: int = property(`NumCols`)

      @add__init__
      def `PackedMatrix` as new_with_size(
          self, r:int, resize_type: MatrixResizeType = default)

      @add__init__
      def `PackedMatrix` as new_with_other(self, orig: PackedMatrix)

      def `SetZero` as set_zero(self):
        """Set all elements to zero."""

      def `SetUnit` as set_unit(self):
        """Sets all elements to zero, and fill the diagonal with ones."""

      def `SetRandn` as set_randn(self):
        """Sets the elements to random values of a normal distribution."""

      def `Trace` as trace(self) -> float:
        """Return the trace of the matrix"""

      def `Resize` as resize(self, num_rows:int, resize_type: MatrixResizeType = default)

      def `AddToDiag` as add_to_diag(self, r: float):
        """Add a constant r to the diagonal of the matrix.

        Args:
            r(float): A constant
        """

      def `ScaleDiag` as scale_diag(self, alpha: float):
        """Scale the diagonal of the matrix by alpha.

        Args:
            alpha(float): A scaling constant
        """

      def `SetDiag` as set_diag(self, alpha: float)

      def `CopyFromPacked` as copy_from_packed(self, orig: PackedMatrix):
        """Copy data from a packed matrix.

           Args:
               orig(PackedMatrix): The packed matrix whose data we will copy
        
           Raises:
               Error in case of dimension mismatch
        """

      def `CopyFromVec` as copy_from_vec(self, orig: SubVector)

      def `NumRows` as __len__(self) -> int:
        """Return the number of rows."""

      def `NumRows` as num_rows(self) -> int:
        """Return the number of rows."""

      def `NumCols` as num_cols(self) -> int:
        """Return the number of columns."""

      def `SizeInBytes` as size_in_bytes(self) -> int:
        """Return the size of the matrix in memory, in bytes."""

      def `operator()` as get(self, r: int, c: int) -> float:
        """Indexing operator.

        Args:
            r(int): The index for row. Indexing starts from 0
            c(int): The index for column. Indexing starts from 0
 
        Returns:
            The indexed element

        Raises:
            Error if r > num_rows or c > num_cols
        """

      def `Max` as max(self) -> float:
        """Return the maximum elememnt of the matrix"""

      def `Min` as min(self) -> float:
        """Return the minimum  elememnt of the matrix"""

      def `Scale` as scale(self, c:float)

      def `Read` as read(self, is: istream, binary: bool, add: bool = default):
        """Reads from C++ stream.

        Args:
            is(istream): The input straem.
            binary(bool): If the stream is binary.
            add(bool): True if you want to add the stream to self.
        """

      def `Write` as write(self, os: ostream, binary: bool):
        """Writes to C++ stream.

        Args:
            os(ostream): The output straem.
            binary(bool): If the stream is binary.
        """

      def `Swap` as swap_with_packed(self, other: PackedMatrix):
        """Swaps the contents of self and other, where other is a
           a Packed Matrix. Shallow swap."""

      def `Swap` as swap_with_matrix(self, other: Matrix):
        """Swaps the contents of self and other, where other is a
           a Matrix. Shallow swap."""
