from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/compressed-matrix-clifwrap.h" import *
from "feat/wave-reader-clifwrap.h" import *
from "nnet3/nnet-example-clifwrap.h" import *

from kaldi.matrix import _construct_vector
from kaldi.matrix import _construct_matrix

from "util/kaldi-table.h":
  namespace `kaldi`:
    def `ReadScriptFile` as read_script_file(rxfilename: str, print_warnings:bool)
        -> (success: bool, script_out: list<tuple<str,str>>)

    def `WriteScriptFile` as write_script_file(wxfilename: str, script: list<tuple<str,str>>) -> bool

    # Sequential Readers

    class `SequentialTableReader<KaldiObjectHolder<Vector<float>>>`
        as SequentialVectorReader:
      @add__init__
      def `SequentialTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> Vector:
        return _construct_vector(...)

      def `Next` as _next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<KaldiObjectHolder<Matrix<float>>>`
        as SequentialMatrixReader:
      @add__init__
      def `SequentialTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> Matrix:
        return _construct_matrix(...)

      def `Next` as _next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<WaveHolder>` as SequentialWaveReader:
      @add__init__
      def `SequentialTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> WaveData

      def `Next` as _next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicHolder<int32>>` as SequentialIntReader:
      @add__init__
      def `SequentialTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> int

      def `Next` as _next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicHolder<float>>` as SequentialFloatReader:
      @add__init__
      def `SequentialTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> float

      def `Next` as _next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicHolder<double>>`
        as SequentialDoubleReader:
      @add__init__
      def `SequentialTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> float

      def `Next` as _next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicHolder<bool>>` as SequentialBoolReader:
      @add__init__
      def `SequentialTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> bool

      def `Next` as _next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicVectorHolder<int32>>`
        as SequentialIntVectorReader:
      @add__init__
      def `SequentialTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> list<int>

      def `Next` as _next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicVectorVectorHolder<int32>>`
        as SequentialIntVectorVectorReader:
      @add__init__
      def `SequentialTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> list<list<int>>

      def `Next` as _next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicPairVectorHolder<int32>>`
        as SequentialIntPairVectorReader:
      @add__init__
      def `SequentialTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> list<tuple<int, int>>

      def `Next` as _next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicPairVectorHolder<float>>`
        as SequentialFloatPairVectorReader:
      @add__init__
      def `SequentialTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> list<tuple<float, float>>

      def `Next` as _next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    # Random Access Readers

    class `RandomAccessTableReader<KaldiObjectHolder<Vector<float>>>`
        as RandomAccessVectorReader:
      @add__init__
      def `RandomAccessTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> Vector:
        return _construct_vector(...)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `RandomAccessTableReader<KaldiObjectHolder<Matrix<float>>>`
        as RandomAccessMatrixReader:
      @add__init__
      def `RandomAccessTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> Matrix:
        return _construct_matrix(...)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `RandomAccessTableReader<WaveHolder>` as RandomAccessWaveReader:
      @add__init__
      def `RandomAccessTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> WaveData

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `RandomAccessTableReader<BasicHolder<int32>>`
        as RandomAccessIntReader:
      @add__init__
      def `RandomAccessTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> int

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `RandomAccessTableReader<BasicHolder<float>>`
        as RandomAccessFloatReader:
      @add__init__
      def `RandomAccessTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> float

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `RandomAccessTableReader<BasicHolder<double>>`
        as RandomAccessDoubleReader:
      @add__init__
      def `RandomAccessTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> float

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `RandomAccessTableReader<BasicHolder<bool>>`
        as RandomAccessBoolReader:
      @add__init__
      def `RandomAccessTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `RandomAccessTableReader<BasicVectorHolder<int32>>`
        as RandomAccessIntVectorReader:
      @add__init__
      def `RandomAccessTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> list<int>

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `RandomAccessTableReader<BasicVectorVectorHolder<int32>>`
        as RandomAccessIntVectorVectorReader:
      @add__init__
      def `RandomAccessTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> list<list<int>>

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `RandomAccessTableReader<BasicPairVectorHolder<int32>>`
        as RandomAccessIntPairVectorReader:
      @add__init__
      def `RandomAccessTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> list<tuple<int, int>>

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `RandomAccessTableReader<BasicPairVectorHolder<float>>`
        as RandomAccessFloatPairVectorReader:
      @add__init__
      def `RandomAccessTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> list<tuple<float, float>>

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    # Random Access Mapped Readers

    class `RandomAccessTableReaderMapped<KaldiObjectHolder<Vector<float>>>`
        as RandomAccessVectorReaderMapped:
      @add__init__
      def `RandomAccessTableReaderMapped` as new(self, table_rspecifier: str,
                                                 map_rspecifier: str)

      def `Open` as open(self, table_rspecifier: str, map_rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> Vector:
        return _construct_vector(...)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `RandomAccessTableReaderMapped<KaldiObjectHolder<Matrix<float>>>`
        as RandomAccessMatrixReaderMapped:
      @add__init__
      def `RandomAccessTableReaderMapped` as new(self, table_rspecifier: str,
                                                 map_rspecifier: str)

      def `Open` as open(self, table_rspecifier: str, map_rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> Matrix:
        return _construct_matrix(...)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `RandomAccessTableReaderMapped<BasicHolder<float>>`
        as RandomAccessFloatReaderMapped:
      @add__init__
      def `RandomAccessTableReaderMapped` as new(self, table_rspecifier: str,
                                                 map_rspecifier: str)

      def `Open` as open(self, table_rspecifier: str, map_rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> float

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    # Writers

    class `TableWriter<KaldiObjectHolder<Vector<float>>>` as VectorWriter:
      @add__init__
      def `TableWriter` as new(self, wspecifier: str)

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: Vector)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<KaldiObjectHolder<Matrix<float>>>` as MatrixWriter:
      @add__init__
      def `TableWriter` as new(self, wspecifier: str)

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: Matrix)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<KaldiObjectHolder<CompressedMatrix>>`
        as CompressedMatrixWriter:
      @add__init__
      def `TableWriter` as new(self, wspecifier: str)

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: CompressedMatrix)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<WaveHolder>` as WaveWriter:
      @add__init__
      def `TableWriter` as new(self, wspecifier: str)

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: WaveData)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicHolder<int32>>` as IntWriter:
      @add__init__
      def `TableWriter` as new(self, wspecifier: str)

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: int)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicHolder<float>>` as FloatWriter:
      @add__init__
      def `TableWriter` as new(self, wspecifier: str)

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: float)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicHolder<double>>` as DoubleWriter:
      @add__init__
      def `TableWriter` as new(self, wspecifier: str)

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: float)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicHolder<bool>>` as BoolWriter:
      @add__init__
      def `TableWriter` as new(self, wspecifier: str)

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: bool)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicVectorHolder<int32>>` as IntVectorWriter:
      @add__init__
      def `TableWriter` as new(self, wspecifier: str)

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: list<int>)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicVectorVectorHolder<int32>>`
        as IntVectorVectorWriter:
      @add__init__
      def `TableWriter` as new(self, wspecifier: str)

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: list<list<int>>)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicPairVectorHolder<int32>>` as IntPairVectorWriter:
      @add__init__
      def `TableWriter` as new(self, wspecifier: str)

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: list<tuple<int, int>>)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicPairVectorHolder<float>>` as FloatPairVectorWriter:
      @add__init__
      def `TableWriter` as new(self, wspecifier: str)

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: list<tuple<float, float>>)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

  namespace `kaldi::nnet3`:
    class SequentialNnetExampleReader:
      @add__init__
      def `SequentialTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> NnetExample

      def `Next` as _next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class RandomAccessNnetExampleReader:
      @add__init__
      def `RandomAccessTableReader` as new(self, rspecifier: str)

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> NnetExample

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class NnetExampleWriter:
      @add__init__
      def `TableWriter` as new(self, wspecifier: str)

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: NnetExample)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool
