from "fstext/float-weight-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *

from "fst/arc.h":
  namespace `fst`:
    class `ArcTpl<TropicalWeight>` as StdArc:
      ilabel: int
      olabel: int
      weight: TropicalWeight
      nextstate: int

      @add__init__
      def `ArcTpl` as new(self, ilabel: int, olabel:int,
                          weight: TropicalWeight, nextstate: int)

      @classmethod
      def Type(cls) -> str

    class `ArcTpl<LogWeight>` as LogArc:
      ilabel: int
      olabel: int
      weight: LogWeight
      nextstate: int

      @add__init__
      def `ArcTpl` as new(self, ilabel: int, olabel:int,
                          weight: LogWeight, nextstate: int)

      @classmethod
      def Type(cls) -> str

    class `ArcTpl<LatticeWeightTpl<float>>` as LatticeArc:
      ilabel: int
      olabel: int
      weight: LatticeWeight
      nextstate: int

      @add__init__
      def `ArcTpl` as new(self, ilabel: int, olabel:int,
                          weight: LatticeWeight, nextstate: int)

      @classmethod
      def Type(cls) -> str

    class `ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>`
        as CompactLatticeArc:
      ilabel: int
      olabel: int
      weight: CompactLatticeWeight
      nextstate: int

      @add__init__
      def `ArcTpl` as new(self, ilabel: int, olabel:int,
                          weight: CompactLatticeWeight, nextstate: int)

      @classmethod
      def Type(cls) -> str
