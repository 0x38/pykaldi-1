# lattice-weight-clifwrap header is needed whenever fst-clifwrap is included.
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/fst-clifwrap.h" import *
from "fstext/expanded-fst-clifwrap.h" import *
from "fstext/mutable-fst-clifwrap.h" import *
from "fstext/vector-fst-clifwrap.h" import *
from "fstext/symbol-table-clifwrap.h" import *
from "base/iostream-clifwrap.h" import *

from kaldi.util import _value_error_on_false

from kaldi.fstext import StdFst
from kaldi.fstext import LogFst
from kaldi.fstext import LatticeFst
from kaldi.fstext import CompactLatticeFst

from "fstext/fst-ext.h":
  namespace `fst`:
    def `AssignVectorFst` as _assign_std_vector_fst(ifst: StdVectorFst,
                                                    ofst: StdVectorFst)
    def `AssignVectorFst` as _assign_log_vector_fst(ifst: LogVectorFst,
                                                    ofst: LogVectorFst)
    def `AssignVectorFst` as _assign_lattice_vector_fst(ifst: LatticeVectorFst,
                                                        ofst: LatticeVectorFst)
    def `AssignVectorFst` as _assign_compact_lattice_vector_fst(ifst: CompactLatticeVectorFst,
                                                                ofst: CompactLatticeVectorFst)

    def `AssignFst` as _assign_std_fst(ifst: StdFst, ofst: StdVectorFst)
    def `AssignFst` as _assign_log_fst(ifst: LogFst, ofst: LogVectorFst)
    def `AssignFst` as _assign_lattice_fst(ifst: LatticeFst, ofst: LatticeVectorFst)
    def `AssignFst` as _assign_compact_lattice_fst(ifst: CompactLatticeFst, ofst: CompactLatticeVectorFst)


    def `FstToString` as std_fst_to_string(fst: StdFst,
                                           isyms: SymbolTable = default,
                                           osyms: SymbolTable = default,
                                           ssyms: SymbolTable = default) -> str
    def `FstToString` as log_fst_to_string(fst: LogFst,
                                           isyms: SymbolTable = default,
                                           osyms: SymbolTable = default,
                                           ssyms: SymbolTable = default) -> str
    def `FstToString` as lattice_fst_to_string(fst: LatticeFst,
                                               isyms: SymbolTable = default,
                                               osyms: SymbolTable = default,
                                               ssyms: SymbolTable = default) -> str
    def `FstToString` as compactlattice_fst_to_string(fst: CompactLatticeFst,
                                                      isyms: SymbolTable = default,
                                                      osyms: SymbolTable = default,
                                                      ssyms: SymbolTable = default) -> str

    def `WriteString` as _write_string(s: str, strm: iostream)

    def `FstToBytes` as std_fst_to_bytes(fst: StdFst) -> bytes
    def `FstToBytes` as log_fst_to_bytes(fst: LogFst) -> bytes
    def `FstToBytes` as lattice_fst_to_bytes(fst: LatticeFst) -> bytes
    def `FstToBytes` as compactlattice_fst_to_bytes(fst: CompactLatticeFst) -> bytes

    def `BytesToStdFst` as bytes_to_std_fst(s: bytes) -> StdFst:
      return StdFst(...)
    def `BytesToLogFst` as bytes_to_log_fst(s: bytes) -> LogFst:
      return LogFst(...)
    def `BytesToLatticeFst` as bytes_to_lattice_fst(s: bytes) -> LatticeFst:
      return LatticeFst(...)
    def `BytesToCompactLatticeFst` as bytes_to_compact_lattice_fst(s: bytes) -> CompactLatticeFst:
      return CompactLatticeFst(...)

    def `BytesToStdVectorFst` as bytes_to_std_vector_fst(s: bytes) -> StdVectorFst:
      return StdFst(...)
    def `BytesToLogVectorFst` as bytes_to_log_vector_fst(s: bytes) -> LogVectorFst:
      return LogFst(...)
    def `BytesToLatticeVectorFst` as bytes_to_lattice_vector_fst(s: bytes) -> LatticeVectorFst:
      return LatticeFst(...)
    def `BytesToCompactLatticeVectorFst` as bytes_to_compact_lattice_vector_fst(s: bytes) -> CompactLatticeVectorFst:
      return CompactLatticeFst(...)

    def `CastStdToLog` as cast_std_to_log(ifst: StdVectorFst) -> LogVectorFst:
      return LogFst(...)
    def `CastLogToStd` as cast_log_to_std(ifst: LogVectorFst) -> StdVectorFst:
      return StdFst(...)

    def `ReadFstKaldiExt` as read_fst_kaldi(rxfilename: str) -> StdVectorFst:
      return StdFst(...)

    def `ConvertLatticeToCompactLattice` as convert_lattice_to_compact_lattice(
        ifst: LatticeExpandedFst,ofst: CompactLatticeMutableFst, invert: bool = default)
    def `ConvertCompactLatticeToLattice` as convert_compact_lattice_to_lattice(
        ifst: CompactLatticeExpandedFst, ofst: LatticeMutableFst, invert: bool = default)
    def `ConvertLatticeToStd` as convert_lattice_to_std(ifst: LatticeExpandedFst, ofst: StdMutableFst)
    def `ConvertStdToLattice` as convert_std_to_lattice(ifst: StdExpandedFst, ofst: LatticeMutableFst)

    def `ScaleKaldiLattice` as scale_lattice(scale: list<list<float>>,
                                            fst: LatticeMutableFst)
    def `ScaleCompactLattice` as scale_compact_lattice(scale: list<list<float>>,
                                                       fst: CompactLatticeMutableFst)
    def `RemoveAlignmentsFromCompactLatticeExt`
        as remove_alignments_from_compact_lattice(fst: CompactLatticeMutableFst)
    def `CompactLatticeHasAlignmentExt`
        as compact_lattice_has_alignment(fst: CompactLatticeExpandedFst) -> bool

    def `GetLinearSymbolSequenceFromLatticeFst`
        as get_linear_symbol_sequence_from_lattice_fst(fst: LatticeFst)
        -> (success: bool, isymbols_out: list<int>, osymbols_out: list<int>, tot_weight_out: LatticeWeight):
      return _value_error_on_false(...)
