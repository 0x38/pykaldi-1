from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "base/iostream-clifwrap.h" import *

from kaldi.util import _value_error_on_false

from "util/kaldi-io.h":
  namespace `kaldi`:
    enum OutputType with:
      `kNoOutput` as NO_OUTPUT
      `kFileOutput` as FILE_OUTPUT
      `kStandardOutput` as STANDARD_OUTPUT
      `kPipeOutput` as PIPE_OUTPUT

    def `ClassifyWxfilename` as classify_wxfilename(wxfilename: str) -> OutputType

    enum InputType with:
      `kNoInput` as NO_INPUT
      `kFileInput` as FILE_INPUT
      `kStandardInput` as STANDARD_INPUT
      `kOffsetFileInput` as OFFSET_FILE_INPUT
      `kPipeInput` as PIPE_INPUT

    def `ClassifyRxfilename` as classify_rxfilename(rxfilename: str) -> InputType

    class Output:
      @add__init__
      def `Output` as new(self, wxfilename: str, binary: bool,
                          write_header: bool = default)

      def `Open` as open(self, wxfilename: str, binary: bool, write_header: bool) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `StreamPtr` as stream(self) -> ostream

      def `Close` as close(self) -> bool

    class Input:
      @add__init__
      def `Input` as new(self, rxfilename: str)

      def `Open` as open(self, rxfilename: str)
        -> (success: bool, contents_binary: bool):
        return _value_error_on_false(...)

      def `OpenTextMode` as open_text_mode(self, rxfilename: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> int

      def `StreamPtr` as stream(self) -> istream

    # Read/Write matrices #

    def `ReadKaldiObject` as read_kaldi_matrix(filename: str, m: Matrix)

    def `WriteKaldiObject` as write_kaldi_matrix(c: Matrix, filename: str,
                                               binary: bool)

    # Read/Write vectors #

    def `ReadKaldiObject` as read_kaldi_vector(filename: str, c: Vector)

    def `WriteKaldiObject` as write_kaldi_vector(c: Vector, filename: str,
                                               binary: bool)

    def `PrintableRxfilename` as printable_rxfilename(rxfilename: str) -> str

    def `PrintableWxfilename` as printable_wxfilename(rxfilename: str) -> str
