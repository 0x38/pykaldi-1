# lattice-weight-clifwrap header is needed whenever fst-clifwrap is included.
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/fst-clifwrap.h" import *
from "fstext/expanded-fst-clifwrap.h" import *
from "fstext/mutable-fst-clifwrap.h" import *
from "fstext/vector-fst-clifwrap.h" import *
from "fstext/symbol-table-clifwrap.h" import *
from "base/iostream-clifwrap.h" import *

from kaldi.util import _value_error_on_false

from "fstext/fst-ext.h":
  namespace `fst`:
    def `FstToString` as StdFstToString(fst: StdFst,
                                        isyms: SymbolTable = default,
                                        osyms: SymbolTable = default,
                                        ssyms: SymbolTable = default) -> str
    def `FstToString` as LogFstToString(fst: LogFst,
                                        isyms: SymbolTable = default,
                                        osyms: SymbolTable = default,
                                        ssyms: SymbolTable = default) -> str
    def `FstToString` as LatticeFstToString(
        fst: LatticeFst,
        isyms: SymbolTable = default,
        osyms: SymbolTable = default,
        ssyms: SymbolTable = default) -> str

    def `FstToString` as CompactLatticeFstToString(
        fst: CompactLatticeFst,
        isyms: SymbolTable = default,
        osyms: SymbolTable = default,
        ssyms: SymbolTable = default) -> str

    def WriteString(s: str, strm: iostream)

    def `FstToBytes` as StdFstToBytes(fst: StdFst) -> bytes
    def `FstToBytes` as LogFstToBytes(fst: LogFst) -> bytes
    def `FstToBytes` as LatticeFstToBytes(fst: LatticeFst) -> bytes
    def `FstToBytes` as CompactLatticeFstToBytes(fst: CompactLatticeFst
                                                ) -> bytes

    def BytesToStdFst(s: bytes) -> StdFst
    def BytesToLogFst(s: bytes) -> LogFst
    def BytesToLatticeFst(s: bytes) -> LatticeFst
    def BytesToCompactLatticeFst(s: bytes) -> CompactLatticeFst

    def BytesToStdVectorFst(s: bytes) -> StdVectorFst
    def BytesToLogVectorFst(s: bytes) -> LogVectorFst
    def BytesToLatticeVectorFst(s: bytes) -> LatticeVectorFst
    def BytesToCompactLatticeVectorFst(s: bytes) -> CompactLatticeVectorFst

    def CastStdToLog(ifst: StdVectorFst) -> LogVectorFst
    def CastLogToStd(ifst: LogVectorFst) -> StdVectorFst

    def `ReadFstKaldiExt` as ReadFstKaldi(rxfilename: str) -> StdVectorFst

    def ConvertLatticeToCompactLattice(ifst: LatticeExpandedFst,
                                       ofst: CompactLatticeMutableFst,
                                       invert: bool = default)
    def ConvertCompactLatticeToLattice(ifst: CompactLatticeExpandedFst,
                                       ofst: LatticeMutableFst,
                                       invert: bool = default)
    def ConvertLatticeToStd(ifst: LatticeExpandedFst, ofst: StdMutableFst)
    def ConvertStdToLattice(ifst: StdExpandedFst, ofst: LatticeMutableFst)

    def `ScaleKaldiLattice` as ScaleLattice(scale: list<list<float>>,
                                            fst: LatticeMutableFst)
    def ScaleCompactLattice(scale: list<list<float>>,
                            fst: CompactLatticeMutableFst)
    def `RemoveAlignmentsFromCompactLatticeExt`
        as RemoveAlignmentsFromCompactLattice(fst: CompactLatticeMutableFst)
    def `CompactLatticeHasAlignmentExt`
        as CompactLatticeHasAlignment(fst: CompactLatticeExpandedFst) -> bool

    def GetLinearSymbolSequenceFromLatticeFst(fst: LatticeFst)
      -> (success: bool, isymbols_out: list<int>, osymbols_out: list<int>,
          tot_weight_out: LatticeWeight):
      return _value_error_on_false(...)
