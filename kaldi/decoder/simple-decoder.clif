from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/fst-clifwrap.h" import *
from "fstext/vector-fst-clifwrap.h" import *
from "itf/decodable-itf-clifwrap.h" import *

from "decoder/simple-decoder.h":
  namespace `kaldi`:
    class SimpleDecoder:
      def __init__(self, fst: StdFst, beam: float)

      def `Decode` as decode(self, decodable: DecodableInterface) -> bool

      def `ReachedFinal` as reached_final(self) -> bool

      def `GetBestPath` as get_best_path(self, fst_out: LatticeVectorFst, use_final_probs: bool = default) -> bool

      def `FinalRelativeCost` as final_relative_cost(self) -> float

      def `InitDecoding` as init_decoding(self)

      def `AdvanceDecoding` as advance_decoding(self, decodable: DecodableInterface, max_num_frames: int = default):
        """This will decode until there are no more frames ready in the decodable object, but if max_num_frames is >= 0 it will decode no more than that many times"""

      def `NumFramesDecoded` as num_frames_decoded(self) -> int:
        """Returns the number of frames already decoded"""