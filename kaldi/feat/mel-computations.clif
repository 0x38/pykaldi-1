from "matrix/kaldi-vector-clifwrap.h" import *
from "feat/feature-window-clifwrap.h" import *

from "feat/mel-computations.h":
  namespace `kaldi`:
    class MelBanksOptions:
      num_bins: int
      low_freq: float
      high_freq: float
      vtln_low: float
      vtln_high: float
      debug_mel: bool
      htk_mode: bool

      def __init__(self, num_bins: int = default)

    class MelBanks:
      def __init__(self, opts: MelBanksOptions,
                   frame_opts: FrameExtractionOptions, vtln_warp_factor: float)

      @add__init__
      def `MelBanks` as from_other(self, other: MelBanks)

      @classmethod
      def InverseMelScale(cls, mel_freq: float) -> float

      @classmethod
      def MelScale(cls, freq: float) -> float

      @classmethod
      def VtlnWarpFreq(cls, vtln_low_cutoff: float, vtln_high_cutoff: float,
                       low_freq: float, high_freq: float,
                       vtln_warp_factor: float, freq: float) -> float

      @classmethod
      def VtlnWarpMelFreq(cls, vtln_low_cutoff: float,
                          vtln_high_cutoff: float,
                          low_freq: float, high_freq: float,
                          vtln_warp_factor: float, mel_freq: float) -> float

      def Compute(self, fft_energies: VectorBase, mel_energies_out: VectorBase)

      def NumBins(self) -> int

      def GetCenterFreqs(self) -> Vector

    def ComputeLifterCoeffs(Q: float, coeffs: VectorBase)

    # FIXME(Dogan): Write helper functions in C++ to wrap these.
    # def Durbin(n: int, pAC: float, pLP: float, pTmp: float) -> float
    #
    # def Lpc2Cepstrum(n: int, pLPC: float, pCepst: float)

    def ComputeLpc(autocorr_in: VectorBase, lpc_out: Vector) -> float

    def GetEqualLoudnessVector(mel_banks: MelBanks, ans: Vector)
