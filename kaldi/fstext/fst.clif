from "fstext/float-weight-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/arc-clifwrap.h" import *
from "fstext/symbol-table-clifwrap.h" import *

from "fst/vector-fst.h":
  namespace `fst`:
    # StdArc

    class `Fst<StdArc>` as StdFst:
      def Type(self) -> str

    class `ExpandedFst<StdArc>` as StdExpandedFst(StdFst):
      def Type(self) -> str

    class `MutableFst<StdArc>` as StdMutableFst(StdExpandedFst):
      def Type(self) -> str

    class `VectorFst<StdArc>` as StdVectorFst(StdMutableFst):
      @add__init__
      def `VectorFst` as from_fst(self, fst: StdFst)
      @add__init__
      def `VectorFst` as from_other(self, fst: StdVectorFst,
                                    safe: bool = default)

      def Start(self) -> int
      def Final(self, state: int) -> TropicalWeight
      def NumStates(self) -> int
      def NumArcs(self, state: int) -> int
      def NumInputEpsilons(self, state: int) -> int
      def NumOutputEpsilons(self, state: int) -> int
      def SetStart(self, state: int)
      def SetFinal(self, state: int, weight: TropicalWeight)
      def AddState(self) -> int
      def AddArc(self, state: int, arc: StdArc)
      def DeleteStates(self, dstates: list<int>)
      def `DeleteStates` as DeleteAllStates(self)
      def DeleteArcs(self, state: int, n: int)
      def `DeleteArcs` as DeleteAllArcs(self, state: int)
      def ReserveStates(self, n: int)
      def ReserveArcs(self, state: int, n: int)

      def Copy(self, safe: bool = default) -> StdVectorFst

      @classmethod
      def Read(cls, filename: str) -> StdVectorFst
      def Write(self, filename: str) -> bool

      def InputSymbols(self) -> SymbolTable
      def OutputSymbols(self) -> SymbolTable
      def MutableInputSymbols(self) -> SymbolTable
      def MutableOutputSymbols(self) -> SymbolTable
      def SetInputSymbols(self, isyms: SymbolTable)
      def SetOutputSymbols(self, osyms: SymbolTable)

      def Properties(self, mask: int, test: bool) -> int
      def SetProperties(self, props: int, mask: int)
      def Type(self) -> str

    class `StateIterator<VectorFst<StdArc>>` as StdStateIterator:
      def __init__(self, fst: StdVectorFst)
      def Done(self) -> bool
      def Value(self) -> int
      def Next(self)
      def Reset(self)

    class `ArcIterator<VectorFst<StdArc>>` as StdArcIterator:
      def __init__(self, fst: StdVectorFst, s: int)
      def Done(self) -> bool
      def Value(self) -> StdArc
      def Next(self)
      def Reset(self)
      def Seek(self, a: int)
      def Position(self) -> int
      def Flags(self) -> int
      def SetFlags(self, flags: int, mask: int)

    class `MutableArcIterator<VectorFst<StdArc>>` as StdMutableArcIterator:
      def __init__(self, fst: StdVectorFst, s: int)
      def Done(self) -> bool
      def Value(self) -> StdArc
      def SetValue(self, arc: StdArc)
      def Next(self)
      def Reset(self)
      def Seek(self, a: int)
      def Position(self) -> int
      def Flags(self) -> int
      def SetFlags(self, flags: int, mask: int)

    # LogArc

    class `Fst<LogArc>` as LogFst:
      def Type(self) -> str

    class `ExpandedFst<LogArc>` as LogExpandedFst(LogFst):
      def Type(self) -> str

    class `MutableFst<LogArc>` as LogMutableFst(LogExpandedFst):
      def Type(self) -> str

    class `VectorFst<LogArc>` as LogVectorFst(LogMutableFst):
      @add__init__
      def `VectorFst` as from_fst(self, fst: LogFst)
      @add__init__
      def `VectorFst` as from_other(self, fst: LogVectorFst,
                                    safe: bool = default)

      def Start(self) -> int
      def Final(self, state: int) -> LogWeight
      def NumStates(self) -> int
      def NumArcs(self, state: int) -> int
      def NumInputEpsilons(self, state: int) -> int
      def NumOutputEpsilons(self, state: int) -> int
      def SetStart(self, state: int)
      def SetFinal(self, state: int, weight: LogWeight)
      def AddState(self) -> int
      def AddArc(self, state: int, arc: LogArc)
      def DeleteStates(self, dstates: list<int>)
      def `DeleteStates` as DeleteAllStates(self)
      def DeleteArcs(self, state: int, n: int)
      def `DeleteArcs` as DeleteAllArcs(self, state: int)
      def ReserveStates(self, n: int)
      def ReserveArcs(self, state: int, n: int)

      def Copy(self, safe: bool = default) -> LogVectorFst

      @classmethod
      def Read(cls, filename: str) -> LogVectorFst
      def Write(self, filename: str) -> bool

      def InputSymbols(self) -> SymbolTable
      def OutputSymbols(self) -> SymbolTable
      def MutableInputSymbols(self) -> SymbolTable
      def MutableOutputSymbols(self) -> SymbolTable
      def SetInputSymbols(self, isyms: SymbolTable)
      def SetOutputSymbols(self, osyms: SymbolTable)

      def Properties(self, mask: int, test: bool) -> int
      def SetProperties(self, props: int, mask: int)
      def Type(self) -> str

    class `StateIterator<VectorFst<LogArc>>` as LogStateIterator:
      def __init__(self, fst: LogVectorFst)
      def Done(self) -> bool
      def Value(self) -> int
      def Next(self)
      def Reset(self)

    class `ArcIterator<VectorFst<LogArc>>` as LogArcIterator:
      def __init__(self, fst: LogVectorFst, s: int)
      def Done(self) -> bool
      def Value(self) -> LogArc
      def Next(self)
      def Reset(self)
      def Seek(self, a: int)
      def Position(self) -> int
      def Flags(self) -> int
      def SetFlags(self, flags: int, mask: int)

    class `MutableArcIterator<VectorFst<LogArc>>` as LogMutableArcIterator:
      def __init__(self, fst: LogVectorFst, s: int)
      def Done(self) -> bool
      def Value(self) -> LogArc
      def SetValue(self, arc: LogArc)
      def Next(self)
      def Reset(self)
      def Seek(self, a: int)
      def Position(self) -> int
      def Flags(self) -> int
      def SetFlags(self, flags: int, mask: int)

    # LatticeArc

    class `Fst<ArcTpl<LatticeWeightTpl<float>>>` as LatticeFst:
      def Type(self) -> str

    class `ExpandedFst<ArcTpl<LatticeWeightTpl<float>>>`
        as LatticeExpandedFst(LatticeFst):
      def Type(self) -> str

    class `MutableFst<ArcTpl<LatticeWeightTpl<float>>>`
        as LatticeMutableFst(LatticeExpandedFst):
      def Type(self) -> str

    class `VectorFst<ArcTpl<LatticeWeightTpl<float>>>`
        as LatticeVectorFst(LatticeMutableFst):
      @add__init__
      def `VectorFst` as from_fst(self, fst: LatticeFst)
      @add__init__
      def `VectorFst` as from_other(self, fst: LatticeVectorFst,
                                    safe: bool = default)

      def Start(self) -> int
      def Final(self, state: int) -> LatticeWeight
      def NumStates(self) -> int
      def NumArcs(self, state: int) -> int
      def NumInputEpsilons(self, state: int) -> int
      def NumOutputEpsilons(self, state: int) -> int
      def SetStart(self, state: int)
      def SetFinal(self, state: int, weight: LatticeWeight)
      def AddState(self) -> int
      def AddArc(self, state: int, arc: LatticeArc)
      def DeleteStates(self, dstates: list<int>)
      def `DeleteStates` as DeleteAllStates(self)
      def DeleteArcs(self, state: int, n: int)
      def `DeleteArcs` as DeleteAllArcs(self, state: int)
      def ReserveStates(self, n: int)
      def ReserveArcs(self, state: int, n: int)

      def Copy(self, safe: bool = default) -> LatticeVectorFst

      @classmethod
      def Read(cls, filename: str) -> LatticeVectorFst
      def Write(self, filename: str) -> bool

      def InputSymbols(self) -> SymbolTable
      def OutputSymbols(self) -> SymbolTable
      def MutableInputSymbols(self) -> SymbolTable
      def MutableOutputSymbols(self) -> SymbolTable
      def SetInputSymbols(self, isyms: SymbolTable)
      def SetOutputSymbols(self, osyms: SymbolTable)

      def Properties(self, mask: int, test: bool) -> int
      def SetProperties(self, props: int, mask: int)
      def Type(self) -> str

    class `StateIterator<VectorFst<ArcTpl<LatticeWeightTpl<float>>>>`
        as LatticeStateIterator:
      def __init__(self, fst: LatticeVectorFst)
      def Done(self) -> bool
      def Value(self) -> int
      def Next(self)
      def Reset(self)

    class `ArcIterator<VectorFst<ArcTpl<LatticeWeightTpl<float>>>>`
        as LatticeArcIterator:
      def __init__(self, fst: LatticeVectorFst, s: int)
      def Done(self) -> bool
      def Value(self) -> LatticeArc
      def Next(self)
      def Reset(self)
      def Seek(self, a: int)
      def Position(self) -> int
      def Flags(self) -> int
      def SetFlags(self, flags: int, mask: int)

    class `MutableArcIterator<VectorFst<ArcTpl<LatticeWeightTpl<float>>>>`
        as LatticeMutableArcIterator:
      def __init__(self, fst: LatticeVectorFst, s: int)
      def Done(self) -> bool
      def Value(self) -> LatticeArc
      def SetValue(self, arc: LatticeArc)
      def Next(self)
      def Reset(self)
      def Seek(self, a: int)
      def Position(self) -> int
      def Flags(self) -> int
      def SetFlags(self, flags: int, mask: int)

    # CompactLatticeArc

    class `Fst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>>`
        as CompactLatticeFst:
      def Type(self) -> str

    class `ExpandedFst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>>`
        as CompactLatticeExpandedFst(CompactLatticeFst):
      def Type(self) -> str

    class `MutableFst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>>`
        as CompactLatticeMutableFst(CompactLatticeExpandedFst):
      def Type(self) -> str

    class `VectorFst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>>`
        as CompactLatticeVectorFst(CompactLatticeMutableFst):
      @add__init__
      def `VectorFst` as from_fst(self, fst: CompactLatticeFst)
      @add__init__
      def `VectorFst` as from_other(self, fst: CompactLatticeVectorFst,
                                    safe: bool = default)

      def Start(self) -> int
      def Final(self, state: int) -> CompactLatticeWeight
      def NumStates(self) -> int
      def NumArcs(self, state: int) -> int
      def NumInputEpsilons(self, state: int) -> int
      def NumOutputEpsilons(self, state: int) -> int
      def SetStart(self, state: int)
      def SetFinal(self, state: int, weight: CompactLatticeWeight)
      def AddState(self) -> int
      def AddArc(self, state: int, arc: CompactLatticeArc)
      def DeleteStates(self, dstates: list<int>)
      def `DeleteStates` as DeleteAllStates(self)
      def DeleteArcs(self, state: int, n: int)
      def `DeleteArcs` as DeleteAllArcs(self, state: int)
      def ReserveStates(self, n: int)
      def ReserveArcs(self, state: int, n: int)

      def Copy(self, safe: bool = default) -> CompactLatticeVectorFst

      @classmethod
      def Read(cls, filename: str) -> CompactLatticeVectorFst
      def Write(self, filename: str) -> bool

      def InputSymbols(self) -> SymbolTable
      def OutputSymbols(self) -> SymbolTable
      def MutableInputSymbols(self) -> SymbolTable
      def MutableOutputSymbols(self) -> SymbolTable
      def SetInputSymbols(self, isyms: SymbolTable)
      def SetOutputSymbols(self, osyms: SymbolTable)

      def Properties(self, mask: int, test: bool) -> int
      def SetProperties(self, props: int, mask: int)
      def Type(self) -> str

    class `StateIterator<VectorFst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>>>`
        as CompactLatticeStateIterator:
      def __init__(self, fst: CompactLatticeVectorFst)
      def Done(self) -> bool
      def Value(self) -> int
      def Next(self)
      def Reset(self)

    class `ArcIterator<VectorFst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>>>`
        as CompactLatticeArcIterator:
      def __init__(self, fst: CompactLatticeVectorFst, s: int)
      def Done(self) -> bool
      def Value(self) -> CompactLatticeArc
      def Next(self)
      def Reset(self)
      def Seek(self, a: int)
      def Position(self) -> int
      def Flags(self) -> int
      def SetFlags(self, flags: int, mask: int)

    class `MutableArcIterator<VectorFst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>>>`
        as CompactLatticeMutableArcIterator:
      def __init__(self, fst: CompactLatticeVectorFst, s: int)
      def Done(self) -> bool
      def Value(self) -> CompactLatticeArc
      def SetValue(self, arc: CompactLatticeArc)
      def Next(self)
      def Reset(self)
      def Seek(self, a: int)
      def Position(self) -> int
      def Flags(self) -> int
      def SetFlags(self, flags: int, mask: int)
