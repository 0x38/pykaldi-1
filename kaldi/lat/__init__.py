from ._arctic_weight import *
from ._confidence import *
from ._determinize_lattice_pruned import *
from ._lattice_functions import *
from ._minimize_lattice import *
from ._push_lattice import *
from ._phone_align_lattice import *
from ._word_align_lattice import *
from ._word_align_lattice_lexicon import *
from ._sausages import *

from .. import fstext as _fst

def sentence_level_confidence(lat):
    """Computes sentence level confidence scores.

    If input is a compact lattice, this function requires that distinct paths in
    `lat` have distinct word sequences; this will automatically be the case if
    `lat` was generated by a decoder, since a deterministic FST has this
    property. If input is a state-level lattice, it is first determinized, but
    this is done in a "smart" way so that only paths needed for this operation
    are generated.

    This function assumes that any acoustic scaling you want to apply,
    has already been applied.

    The output consists of the following. `confidence` is the score difference
    between the best path and the second-best path in the lattice (a positive
    number), or zero if lattice was equivalent to the empty FST (no successful
    paths), or infinity if there was only one path in the lattice. `num_paths`
    is a number in `{0, 1, 2}` saying how many n-best paths (up to two) were
    found. If `num_paths >= 1`, `best_sentence` is the best word-sequence; if
    `num_paths -= 2`, `second_best_sentence` is the second best word-sequence
    (this may be useful for testing whether the two best word sequences are
    somehow equivalent for the task at hand).

    Returns:
        Tuple[float, int, List[int], List[int]]: The tuple
        `(confidence, num_paths, best_sentence, second_best_sentence)`.

    Note:
        This function is not the only way to get confidences in Kaldi. This only
        gives you sentence-level (utterance-level) confidence. You can get
        word-by-word confidence within a sentence, along with Minimum Bayes Risk
        decoding. Also confidences estimated using this function are not very
        accurate.
    """
    if isinstance(lat, _fst.CompactLatticeVectorFst):
        return _sentence_level_confidence_from_compact_lattice(lat)
    else:
        return _sentence_level_confidence_from_lattice(lat)

__all__ = [name for name in dir()
           if name[0] != '_'
           and not name.endswith('Base')]
