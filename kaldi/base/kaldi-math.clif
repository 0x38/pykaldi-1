
from "base/kaldi-math.h":
  namespace `kaldi`:

    # kLogZeroFloat:float = default
    # kLogZeroDouble:float = default
    # kLogZeroBaseFloat:float = default

    class RandomState:
      seed: int

    def Rand(state: RandomState = default) -> int

    def RandInt(first: int, last: int, state: RandomState = default) -> int 

    def WithProb(prob:float, state: RandomState = default) -> bool

    def RandUniform(state: RandomState = default) -> float 

    def RandGauss(state: RandomState = default) -> float 

    def RandPoisson(lambda: float, state: RandomState = default) -> int

    # NOTE (VM):
    # This were included in kaldi-math-ext.h
    # def RandGauss2(a:float, b:float, state: RandomState = default)
    # def LogAdd(x:float, y:float) -> float
    # def Hypot(x:float, y:float) -> float

    def `RandPrune` as _FloatRandPrune(post:float, prune_tresh:float, state: RandomState = default) -> float
    
    def ApproxEqual(a:float, b:float, relative_tolerance:float = default) -> bool

    def RoundUpToNearestPowerOfTwo(n:int) -> int 

    def DivideRoundingDown(a:int, b:int) -> int

    def `Gcd` as Gcd(m:int, n:int) -> int 

    def `Lcm` as _Lcm(m:int, n:int) -> int 

    def `Factorize` as _Factorize(m:int) -> (factors:list<int>)
