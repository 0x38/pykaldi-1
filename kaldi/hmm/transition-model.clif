from "itf/options-itf-clifwrap.h" import *
from "itf/context-dep-itf-clifwrap.h" import *
from "util/iostream-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "hmm/hmm-topology-clifwrap.h" import *

from "hmm/transition-model.h":
  namespace `kaldi`:
    class MleTransitionUpdateConfig:
      floor: float
      mincount: float
      share_for_pdfs: bool

      def __init__(self, floor: float = default, mincount: float = default,
                   share_for_pdfs: bool = default)

      def Register(self, opts: OptionsItf)

    class MapTransitionUpdateConfig:
      tau: float
      share_for_pdfs: bool

      def Register(self, opts: OptionsItf)

    class TransitionModel:
      @add__init__
      def `TransitionModel` as from_topo(self,
                                         ctx_dep: ContextDependencyInterface,
                                         hmm_topo: HmmTopology)

      def Read(self, is: istream, binary: bool)

      def Write(self, os: ostream, binary: bool)

      def GetTopo(self) -> HmmTopology

      def TupleToTransitionState(self, phone: int, hmm_state: int, pdf: int,
                                 self_loop_pdf: int) -> int
      def PairToTransitionId(self, trans_state: int, trans_index: int) -> int
      def TransitionIdToTransitionState(self, trans_id: int) -> int
      def TransitionIdToTransitionIndex(self, trans_id: int) -> int
      def TransitionStateToPhone(self, trans_state: int) -> int
      def TransitionStateToHmmState(self, trans_state: int) -> int
      def TransitionStateToForwardPdfClass(self, trans_state: int) -> int
      def TransitionStateToSelfLoopPdfClass(self, trans_state: int) -> int
      def TransitionStateToForwardPdf(self, trans_state: int) -> int
      def TransitionStateToSelfLoopPdf(self, trans_state: int) -> int
      def SelfLoopOf(self, trans_state: int) -> int
      def TransitionIdToPdf(self, trans_id: int) -> int
      def TransitionIdToPhone(self, trans_id: int) -> int
      def TransitionIdToPdfClass(self, trans_id: int) -> int
      def TransitionIdToHmmState(self, trans_id: int) -> int

      def IsFinal(self, trans_id: int) -> bool

      def IsSelfLoop(self, trans_id: int) -> bool

      def NumTransitionIds(self) -> int

      def NumTransitionIndices(self, trans_state: int) -> int

      def NumTransitionStates(self) -> int

      def NumPdfs(self) -> int

      def NumPhones(self) -> int

      def GetPhones(self) -> list<int>

      def GetTransitionProb(self, trans_id: int) -> float
      def GetTransitionLogProb(self, trans_id: int) -> float
      def GetTransitionLogProbIgnoringSelfLoops(self, trans_id: int) -> float
      def GetNonSelfLoopLogProb(self, trans_id: int) -> float

      def MleUpdate(self, stats: DoubleVector, cfg: MleTransitionUpdateConfig)
          -> (objf_impr_out: float, count_out: float)

      def MapUpdate(self, stats: DoubleVector, cfg: MapTransitionUpdateConfig)
          -> (objf_impr_out: float, count_out: float)

      def Print(self, os: ostream, phone_names: list<str>,
                occs: DoubleVector = default)

      def InitStats(self, stats: DoubleVector)

      def Accumulate(self, prob: float, trans_id: int, stats: DoubleVector)

      def Compatible(self, other: TransitionModel) -> bool

    def GetPdfsForPhones(trans_model: TransitionModel, phones: list<int>)
        -> (ret: bool, pdfs: list<int>)

    def GetPhonesForPdfs(trans_model: TransitionModel, pdfs: list<int>)
        -> (ret: bool, phones: list<int>)
