from "util/iostream-clifwrap.h" import *
from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/compressed-matrix-clifwrap.h" import *
from "cudamatrix/cu-matrix-clifwrap.h" import *

from "matrix/sparse-matrix.h":
  namespace `kaldi`:
    class `SparseVector<float>` as SparseVector:
      def `Dim` as dim(self) -> int:
        """Returns the size of the sparse vector."""

      def `Sum` as sum(self) -> float:
        """Returns the summation of the elements."""

      def `CopyElementsToVec` as copy_elements_to_vec(self, vec: VectorBase)

      def `AddToVec` as add_to_vec(self, alpha: float, vec: VectorBase)

      def `CopyFromSvec` as copy_from_svec(self, other: SparseVector)

      @add__init__
      def `SparseVector` as new_from_other(self, other: SparseVector)

      def `Swap` as swap(self, other: SparseVector)

      def `Max` as max(self) -> (value: float, index: int)

      def `NumElements` as num_elements(self) -> int

      def `GetElement` as get_elements(self, i: int) -> tuple<int, float>

      def `SetRandn` as set_randn(self, zero_prob: float)

      @add__init__
      def `SparseVector` as new_from_dim(self, dim: int)

      @add__init__
      def `SparseVector` as new_from_pairs(self, dim: int,
                                           pairs: list<tuple<int, float>>)

      def `Resize` as resize(self, dim: int, resize_type: MatrixResizeType = default)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      def `Scale` as scale(self, alpha: float)

    def `VecSvec` as vec_svec(vec: VectorBase, svec: SparseVector) -> float

    class `SparseMatrix<float>` as SparseMatrix:
      def `NumRows` as num_rows(self) -> int

      def `NumCols` as num_cols(self) -> int

      def `NumElements` as num_elements(self) -> int

      def `Sum` as sum(self) -> float

      def `FrobeniusNorm` as frobenius_norm(self) -> float

      def `CopyToMat` as copy_to_mat(self, other: MatrixBase, t: MatrixTransposeType = default)

      def `CopyElementsToVec` as copy_elements_to_vec(self, other: VectorBase)

      def `CopyFromSmat` as copy_from_smat(self, other: SparseMatrix)

      def `AddToMat` as add_to_mat(self, alpha: float, other: MatrixBase,
                   t: MatrixTransposeType = default)

      @add__init__
      def `SparseMatrix` as new_from_other(self, other: SparseMatrix)

      def `Swap` as swap(self, other: SparseMatrix)

      @add__init__
      def `SparseMatrix` as new_from_pairs(
          self, dim: int, pairs: list<list<tuple<int, float>>>)

      def `SetRandn` as set_randn(self, zero_prob: float)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      def `Row` as row(self, r: int) -> SparseVector

      def `SetRow` as set_row(self, r: int, vec: SparseVector)

      # def AppendSparseMatrixRows(self, inputs: list<SparseMatrix>)

      @add__init__
      def `SparseMatrix` as new_from_dims(self, num_rows: int, num_cols: int)

      def `Resize` as resize(self, rows: int, cols: int,
                 resize_type: MatrixResizeType = default)

      def `Scale` as scale(self, alpha: float)

    def `TraceMatSmat` as trace_mat_smat(A: MatrixBase, B: SparseMatrix,
                     trans: MatrixTransposeType = default) -> float

    enum GeneralMatrixType with:
      `kFullMatrix` as FULL_MATRIX
      `kCompressedMatrix` as COMPRESSED_MATRIX
      `kSparseMatrix` as SPARSE_MATRIX

    class GeneralMatrix:
      def `Type` as type(self) -> GeneralMatrixType

      def `Compress` as compress(self)

      def `Uncompress` as uncompress(self)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      def `GetSparseMatrix` as get_sparse_matrix(self) -> SparseMatrix

      def `SwapSparseMatrix` as swap_sparse_matrix(self, smat: SparseMatrix)

      def `GetCompressedMatrix` as get_compressed_matrix(self) -> CompressedMatrix

      def `SwapCompressedMatrix` as swap_compressed_matrix(self, cmat: CompressedMatrix)

      def `GetFullMatrix` as get_full_matrix(self) -> Matrix

      def `GetMatrix` as get_matrix(self) -> Matrix

      def `SwapFullMatrix` as swap_full_matrix(self, cmat: Matrix)

      def `CopyToMat` as copy_to_mat(self, mat: MatrixBase,
                    trans: MatrixTransposeType = default)

      def `CopyToMat` as copy_to_cu_mat(self, cu_mat: CuMatrixBase,
                                     trans: MatrixTransposeType = default)

      def `AddToMat` as add_to_mat(self, alpha: float, mat: MatrixBase,
                   trans: MatrixTransposeType = default)

      def `AddToMat` as add_to_cu_mat(self, alpha: float, cu_mat: CuMatrixBase,
                                   trans: MatrixTransposeType = default)

      def `Scale` as scale(self, alpha: float)

      def `NumRows` as num_rows(self) -> int

      def `NumCols` as num_cols(self) -> int

      @add__init__
      def `GeneralMatrix` as new_from_matrix(self, other: MatrixBase)

      @add__init__
      def `GeneralMatrix` as new_from_compressed(self, other: CompressedMatrix)

      @add__init__
      def `GeneralMatrix` as new_from_sparse(self, other: SparseMatrix)

      @add__init__
      def `GeneralMatrix` as new_from_other(self, other: GeneralMatrix)

      def `Clear` as clear(self)

      def `Swap` as swap(self, other: GeneralMatrix)

    # def AppendGeneralMatrixRows(src: list<GeneralMatrix>) -> GeneralMatrix

    def `FilterSparseMatrixRows` as filter_sparse_matrix_rows(in: SparseMatrix, keep_rows: list<bool>)
        -> SparseMatrix

    def `FilterMatrixRows` as filter_matrix_rows(in: Matrix, keep_rows: list<bool>) -> Matrix

    def `FilterCompressedMatrixRows` as filter_compressed_matrix_rows(in: CompressedMatrix, keep_rows: list<bool>)
        -> Matrix

    def `FilterGeneralMatrixRows` as filter_general_matrix_rows(in: GeneralMatrix, keep_rows: list<bool>)
        -> GeneralMatrix

    def `ExtractRowRangeWithPadding` as extract_row_range_with_padding(in: GeneralMatrix, row_offset: int,
                                   num_rows: int) -> GeneralMatrix
