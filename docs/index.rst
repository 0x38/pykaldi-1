PyKaldi
=======

.. warning:: PyKaldi is still at alpha stage. Some features might not work yet.

PyKaldi is a Python package that aims to provide a bridge between Kaldi and all
the nice things Python has to offer. With PyKaldi, you can extract MFCC feature
matrices from audio files using Kaldi, construct speaker-recognition models
using scikit learn, and develop your novel idea for an end-to-end ASR system in
TensorFlow. All without having to exit your python interpreter!

To make working with Kaldi in Python a breeze, PyKaldi provides first class
support for Kaldi and OpenFst types. These types can be easily constructed,
manipulated, and displayed inside interactive Python interpreters such as
IPython. PyKaldi vector and matrix types can be seamlessly converted to NumPy
arrays and vice versa by sharing the underlying memory buffers.

Major features and goals of PyKaldi include:

* Near-complete coverage of Kaldi

* First class support for Kaldi and OpenFst types in Python

* Extensible design

* Open license

* Extensive documentation

* Thorough testing

* Example scripts

* Support for both Python 2.7 and 3.5+


About PyKaldi
-------------

PyKaldi harnesses the power of `CLIF <https://github.com/google/clif>`_ to wrap
Kaldi C++ libraries using simple API descriptions. The CPython extension modules
generated by CLIF can be imported in Python to interact with Kaldi. While CLIF
is great for exposing the existing C++ API in Python, the wrappers do not always
expose a "Pythonic" API that is easy to use from Python. To address this
concern, PyKaldi extends the raw CLIF wrappers in Python when doing so would
enable a better user experience.

PyKaldi has a modular design which makes it easy to maintain and extend. Source
files are organized in a directory tree that is a replica of the Kaldi source
tree. Each directory defines a subpackage and contains only the wrapper code
written for the associated Kaldi library. The wrapper code consists of:

* CLIF C++ API descriptions defining the types and functions to be wrapped and
  their Python API,

* C++ headers defining the shims for Kaldi code that is not compliant with the
  Google C++ style expected by CLIF,

* Python modules grouping together related extension modules generated with CLIF
  and extending the raw CLIF wrappers to provide a more "Pythonic" API.

For more information, please refer to the developer's guide.


Getting Started
---------------

Some places to help you get started:

* `Walkthrough Example <https://github.com/usc-sail/pykaldi/tree/master/examples/walkthrough.md>`_
* `Some Kaldi binaries re-implemented using PyKaldi <https://github.com/usc-sail/pykaldi/tree/master/examples>`_


.. toctree::
   :hidden:

   self

.. toctree::
   :caption: User Guide
   :glob:
   :maxdepth: 2

   user/*

.. toctree::
   :caption: Developer Guide
   :glob:
   :maxdepth: 2

   dev/*

.. include:: api.rst
