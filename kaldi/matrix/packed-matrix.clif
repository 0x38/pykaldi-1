from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/matrix-ext.h" import *

from "matrix/packed-matrix.h":
  namespace `kaldi`:
    class `PackedMatrix<float>` as PackedMatrix:
      num_rows: int = property(`NumRows`)
      num_cols: int = property(`NumCols`)

      @add__init__
      def `PackedMatrix` as NewWithSize(self, r:int,
                                        resize_type:MatrixResizeType = default)

      # TODO:
      # Add fix in kaldi
      # @add__init__
      # def `PackedMatrix` as NewWithOther(self, orig:PackedMatrix)

      def SetZero(self)

      def SetUnit(self)

      def SetRandn(self)

      def Trace(self) -> float

      def Resize(self, num_rows:int, resize_type:MatrixResizeType = default)

      def AddToDiag(self, r: float)

      def ScaleDiag(self, alpha: float)

      def SetDiag(self, alpha: float)

      def CopyFromPacked(self, orig:PackedMatrix)

      # FIXME
      # def CopyFromVec(self, orig:SubVector)

      def NumRows(self) -> int

      def NumCols(self) -> int

      def SizeInBytes(self) -> int

      # TODO:
      # Do it in python
      # def operator() as __getitem__

      def Max(self) -> float

      def Min(self) -> float

      def Scale(self, c:float)

      # TODO
      # def Read(self, in:)
      # def Write(self, out:)

      def `Swap` as SwapWithPacked(self, other:PackedMatrix)

      def `Swap` as SwapWithMatrix(self, other:Matrix)
