from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/packed-matrix-clifwrap.h" import *
from "matrix/sp-matrix-clifwrap.h" import *
from "matrix/matrix-ext.h" import *

from "matrix/tp-matrix.h":
  namespace `kaldi`:
    class `TpMatrix<float>` as TpMatrix:

      @add__init__
      def `TpMatrix` as New(self, r: int, resize_type: MatrixResizeType = default)

      @add__init__
      def `TpMatrix` as NewWithOther(self, orig:TpMatrix)

      # TODO:
      # def `TpMatrix` as WithCU(cu:CuTpMatrix)

      # def operator() -> __getitem__

      def Cholesky(self, orig:SpMatrix)

      def Invert(self)

      def InvertDouble(self)

      def Swap(self, other: TpMatrix)

      def Determinant(self) -> float

      def CopyFromMat(self, M:MatrixBase, Trans:MatrixTransposeType = default)

      def CopyFromTp(self, other:TpMatrix)

      def AddTp(self, alpha: float, M:TpMatrix)

      def Resize(self, nRows: int, resize_type: MatrixResizeType = default)