from "base/iostream-clifwrap.h" import *
from "base/sstream-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "cudamatrix/cu-vector-clifwrap.h" import *
from "cudamatrix/cu-matrix-clifwrap.h" import *

from "nnet3/nnet-parse.h":
  namespace `kaldi::nnet3`:
    class ConfigLine:
      def ParseLine(self, line: str) -> bool

      def `GetValue` as get_str(self, key: str) -> (suc: bool, value: str)
      def `GetValue` as get_float(self, key: str) -> (suc: bool, value: float)
      def `GetValue` as get_int(self, key: str) -> (suc: bool, value: int)
      def `GetValue` as get_intlist(self, key: str) -> (suc: bool,
                                                        value: list<int>)
      def `GetValue` as get_bool(self, key: str) -> (suc: bool, value: bool)

      def HasUnusedValues(self) -> bool

      def UnusedValues(self) -> str

      def FirstToken(self) -> str

      def WholeLine(self) -> str

    # ParseFromString

    def DescriptorTokenize(input: str) -> (suc: bool, tokens: list<str>)

    def IsValidName(name: str) -> bool

    def ReadConfigLines(is: istream) -> list<str>

    def ParseConfigLines(lines: list<str>) -> list<ConfigLine>

    # NameMatchesPattern

    def `ErrorContext` as ErrorContextFromStream(is: istream) -> str

    def ErrorContext(str: str) -> str

    def SummarizeVector(vec: Vector) -> str

    def `PrintParameterStats` as PrintParameterVectorStats(
        os: ostringstream, name: str, params: CuVectorBase,
        include_mean: bool = default)

    def `PrintParameterStats` as PrintParameterMatrixStats(
        os: ostringstream, name: str, params: CuMatrix,
        include_mean: bool = default)
