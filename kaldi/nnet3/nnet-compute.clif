from "itf/options-itf-clifwrap.h" import *
from "cudamatrix/cu-matrix-clifwrap.h" import *
from "nnet3/nnet-example-clifwrap.h" import *
from "nnet3/nnet-computation-clifwrap.h" import *
from "nnet3/nnet-nnet-clifwrap.h" import *

from "nnet3/nnet-compute.h":
  namespace `kaldi::nnet3`:
    class NnetComputeOptions:
      debug: bool

      def Register(self, opts: OptionsItf)

    class NnetComputer:
      def __init__(self, options: NnetComputeOptions,
                   computation: NnetComputation, nnet: Nnet,
                   nnet_to_update: Nnet)

      def AcceptInput(self, node_name: str, input: CuMatrix)

      def AcceptInputs(self, nnet: Nnet, io: list<NnetIo>)

      def Run(self)

      # def GetOutput(self, node_name: str) -> CuMatrixBase

      def GetOutputDestructive(self, output_name: str) -> CuMatrix
