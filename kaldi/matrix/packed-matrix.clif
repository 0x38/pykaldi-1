from "util/iostream-clifwrap.h" import *
from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/matrix-ext.h" import *

from "matrix/packed-matrix.h":
  namespace `kaldi`:
    class `PackedMatrix<float>` as PackedMatrix:
      num_rows: int = property(`NumRows`)
      num_cols: int = property(`NumCols`)

      @add__init__
      def `PackedMatrix` as NewWithSize(
          self, r:int, resize_type: MatrixResizeType = default)

      @add__init__
      def `PackedMatrix` as NewWithOther(self, orig: PackedMatrix)

      def SetZero(self)

      def SetUnit(self)

      def SetRandn(self)

      def Trace(self) -> float

      def Resize(self, num_rows:int, resize_type: MatrixResizeType = default)

      def AddToDiag(self, r: float)

      def ScaleDiag(self, alpha: float)

      def SetDiag(self, alpha: float)

      def CopyFromPacked(self, orig: PackedMatrix)

      def CopyFromVec(self, orig: SubVector)

      def `NumRows` as __len__(self) -> int

      def NumRows(self) -> int

      def NumCols(self) -> int

      def SizeInBytes(self) -> int

      def `operator()` as Get(self, r: int, c: int) -> float

      def Max(self) -> float

      def Min(self) -> float

      def Scale(self, c:float)

      def Read(self, is: istream, binary: bool, add: bool = default)

      def Write(self, os: ostream, binary: bool)

      def `Swap` as SwapWithPacked(self, other: PackedMatrix)

      def `Swap` as SwapWithMatrix(self, other: Matrix)
